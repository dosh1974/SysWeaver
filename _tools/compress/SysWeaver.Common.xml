<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SysWeaver.Common</name>
    </assembly>
    <members>
        <member name="M:SysWeaver.AI.IOpenAiToolContext.AddLink(System.String)">
            <summary>
            Add a link to something (displayed in chat)
            </summary>
            <param name="url">The local or absolute url to the file</param>
        </member>
        <member name="M:SysWeaver.AI.IOpenAiToolContext.AddMessageFile(System.String,System.String,System.String)">
            <summary>
            Attach some data as a file to a message
            </summary>
            <param name="mime">The mimetype of the file</param>
            <param name="data">The data of the file</param>
            <param name="filename">The name of the file, used when saving etc</param>
            <returns>The local url to the file</returns>
        </member>
        <member name="M:SysWeaver.AI.IOpenAiToolContext.AddMessageFile(System.String,System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Attach some data as a file to a message
            </summary>
            <param name="mime">The mimetype of the file</param>
            <param name="data">The data of the file</param>
            <param name="filename">The name of the file, used when saving etc</param>
            <returns>The local url to the file</returns>
        </member>
        <member name="M:SysWeaver.AI.IOpenAiToolContext.SetProperty``1(System.String,``0)">
            <summary>
            Assign a property for this chat session
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SysWeaver.AI.IOpenAiToolContext.TryGetProperty``1(System.String,``0@)">
            <summary>
            Get a property previously assigned to the chat session
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SysWeaver.AI.IOpenAiToolContext.TryRemoveProperty``1(System.String,``0@)">
            <summary>
            Delete a property previously assigned to the chat session
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:SysWeaver.AI.OpenAiIgnoreAttribute">
            <summary>
            An attribute that allows certain members to be ignored when creating an AI tool specification
            </summary>
        </member>
        <member name="T:SysWeaver.AI.OpenAiOptionalAttribute">
            <summary>
            An attribute that adds the explanation that a member is optional in an AI tool specification
            </summary>
        </member>
        <member name="T:SysWeaver.AI.OpenAiToolAttribute">
            <summary>
            An attribute that prints out an emoji when an AI tools is called
            </summary>
        </member>
        <member name="T:SysWeaver.AI.OpenAiUseAttribute">
            <summary>
            Put this on a method on an instance in the service registry and the method will be available as an Open AI tool.
            No need to add a dependency to open AI.
            </summary>
        </member>
        <member name="T:SysWeaver.AI.IHaveOpenAiTools">
            <summary>
            An interface used to indicate that the type contains open AI tools (having methods with the OpenAiUseAttribute or OpenAiToolAttribute)
            </summary>
        </member>
        <member name="T:SysWeaver.AI.OpenAiTableRowTypeAttribute">
            <summary>
            For AI functions that return a table data reference, use this attribute to specify the type of the row.
            Column information will then be added to the AI tool declareation.
            </summary>
        </member>
        <member name="M:SysWeaver.AI.OpenAiTableRowTypeAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rowType">The type of data in the table</param>
            <param name="canEdit">Set to true if this method can modify the table data before creating and returning a reference</param>
        </member>
        <member name="T:SysWeaver.AI.OpenAiToolNameAttribute">
            <summary>
            An attribute that overides the name (that the AI sees) of the tool.
            Default is the method name.
            </summary>
        </member>
        <member name="M:SysWeaver.AI.OpenAiToolNameAttribute.#ctor(System.String)">
            <summary>
            Name (that the AI sees) of the tool.
            {0} is replaced with the AI tool prefix.
            {1} is replaced with the method name.
            Empty or null will use the "{0}{1}" name for the tool.
            </summary>
            <param name="toolName"></param>
        </member>
        <member name="T:SysWeaver.AI.OpenAiToolPrefixAttribute">
            <summary>
            An attribute that sets the AI tool prefix for all tools declared in this type.
            Default is the type name.
            Can be set to empty for no tool prefix.
            </summary>
        </member>
        <member name="T:SysWeaver.Roles">
            <summary>
            Defines some roles that should be used as defautl auth requirements
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.Debug">
            <summary>
            API's that should only be used during development of the back-end service.
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.Admin">
            <summary>
            API's that an admin should be able to access, think of this as a non-technical repsonible person.
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.Dev">
            <summary>
            API's that a front-end or service cosumer developer should have access to.
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.Ops">
            <summary>
            API's that a op-manager (it-technician) should have access to.
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.Service">
            <summary>
            API's that is intended to be consumed by some service
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.Disabled">
            <summary>
            This will disable anyone from accessing the API
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.AdminOps">
            <summary>
            Combined Admin and Ops
            </summary>
        </member>
        <member name="F:SysWeaver.Roles.OpsDev">
            <summary>
            Combined Ops and Dev
            </summary>
        </member>
        <member name="T:SysWeaver.ResourceOrderAttribute">
            <summary>
            Use to specify the order (priority) of embedded resources (when serving them as files)
            </summary>
        </member>
        <member name="M:SysWeaver.ResourceOrderAttribute.#ctor(System.Double)">
            <summary>
            Use to specify the order (priority) of embedded resources (when serving them as files)
            </summary>
            <param name="order">A higher value gives it priority over the same reosurce in some other assembly with a lower order</param>
        </member>
        <member name="F:SysWeaver.ResourceOrderAttribute.Order">
            <summary>
            The order (priority) of resources in this assembly
            </summary>
        </member>
        <member name="T:SysWeaver.Amount">
            <summary>
            Represents an amount (value / currency pair)
            </summary>
        </member>
        <member name="F:SysWeaver.Amount.Value">
            <summary>
            The value part of the amount
            </summary>
        </member>
        <member name="F:SysWeaver.Amount.Currency">
            <summary>
            The ISO-4217 currency code
            </summary>
        </member>
        <member name="P:SysWeaver.ApiKeyParams.ApiKey">
            <summary>
            The Api Key, optionally use the CredFile instead to read it from a file.
            </summary>
        </member>
        <member name="P:SysWeaver.ApiKeyParams.CredFile">
            <summary>
            Filename, if specified the API key is read from the file (should be single line of text, lines starting with '#' is considered a comment and not read).
            </summary>
        </member>
        <member name="M:SysWeaver.ApiKeyParams.GetApiKey(System.Boolean)">
            <summary>
            Get the api key (may be from the supplied file, no caching is done so don't call frequently)
            </summary>
            <param name="mustBeValid">Throw if the user or password is empty</param>
            <returns>False if the user or password is empty, else True</returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.SafeGetAt``1(``0[],System.Int32,``0)">
            <summary>
            Get a value from an array, return a value on fail.
            Will fail if array is null or if the index is out of bound.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="index">The array index to get a value for (may be outside the array)</param>
            <param name="onFail">The value to return when failing (null or out of bounds)</param>
            <returns>The value at the index or the onFail value if failed</returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.Push``1(``0[],``0)">
            <summary>
            Push an item to the end of an array, reallocation will happen = slow
            If the array is null a new array with the val is returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.Concat``1(``0[],``0[])">
            <summary>
            Concat two arrays.
            If both arrays are null, null is returned.
            If any array is null, the other array is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.Create``1(System.Int32,``0)">
            <summary>
            Create and initiate an array with a scalar value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Take N elements from an enumerable and create an array of them
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.Reordered``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Create a new re-ordered array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The original array</param>
            <param name="order">The new order, ex: newArray[0] = values[order[0]]</param>
            <returns>A ew array with the elements ordered according to the order</returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.ShallowClonePrimitive``1(``0[])">
            <summary>
            Clones (shallow) an array of primitive types (using a fast mem copy).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.ShallowClone``1(``0[])">
            <summary>
            Clones (shallow) an array (if the type T is primitive, please use the faster ShallowClonePrimitive instead).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.DeepClone``1(``0[])">
            <summary>
            Deep clones an array (the T must implement the IClone_T interface)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.Clone``1(``0[])">
            <summary>
            Deep clones an array (the T must implement the IClone interface)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.ArrayExt.DeepCovert``2(``1[])">
            <summary>
            Deep clones an array (the D must implement the IClone_T interface)
            </summary>
            <typeparam name="D"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="F:SysWeaver.AsyncLock.NoLock">
            <summary>
            Useful helper when using the coalesce operator ?.
            </summary>
        </member>
        <member name="M:SysWeaver.AsyncLock.Lock">
            <summary>
            Wait for a lock to be taken
            </summary>
            <returns>An IDisposable that releases the lock</returns>
        </member>
        <member name="M:SysWeaver.AsyncLock.Lock(System.Int32)">
            <summary>
            Wait for a lock to be taken, for a limited time
            </summary>
            <param name="waitMilliSeconds">Number of milliseconds to wait at most</param>
            <returns>An IDisposable that releases the lock or null if the wait timed-out and no lock is taken</returns>
        </member>
        <member name="M:SysWeaver.AsyncLock.LockSync">
            <summary>
            Wait for a lock to be taken
            </summary>
            <returns>An IDisposable that releases the lock</returns>
        </member>
        <member name="M:SysWeaver.AsyncLock.LockSync(System.Int32)">
            <summary>
            Wait for a lock to be taken, for a limited time
            </summary>
            <param name="waitMilliSeconds">Number of milliseconds to wait at most</param>
            <returns>An IDisposable that releases the lock or null if the wait timed-out and no lock is taken</returns>
        </member>
        <member name="M:SysWeaver.AsyncLock.#ctor(System.Int32)">
            <summary>
            Create a new async lock 
            </summary>
            <param name="maxConcurrentAccess">Number of allowed concurrent accesses to the loakced resources</param>
        </member>
        <member name="T:SysWeaver.BinarySearch">
            <summary>
            Contains methods for doing searching on sorted data
            </summary>
        </member>
        <member name="M:SysWeaver.BinarySearch.Find``1(System.Int32,System.Int32,``0,System.Func{System.Int32,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Find a value in some sorted data
            </summary>
            <typeparam name="E">The type of the value to find</typeparam>
            <param name="index">The start index (typically zero)</param>
            <param name="length">The length of the range to search in (typically the length of a container)</param>
            <param name="value">The value to find</param>
            <param name="valueAt">A function that returns the value at a specified index</param>
            <param name="comparer">An optional comparer</param>
            <returns>The index containing the <paramref name="value"/> or negative if not found, use the two's completent operator (~) to get the index of the first elemnt that was lower</returns>
        </member>
        <member name="M:SysWeaver.BinarySearch.Find``1(System.Int64,System.Int64,``0,System.Func{System.Int64,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Find a value in some sorted data
            </summary>
            <typeparam name="E">The type of the value to find</typeparam>
            <param name="index">The start index (typically zero)</param>
            <param name="length">The length of the range to search in (typically the length of a container)</param>
            <param name="value">The value to find</param>
            <param name="valueAt">A function that returns the value at a specified index</param>
            <param name="comparer">An optional comparer</param>
            <returns>The index containing the <paramref name="value"/> or negative if not found, use the two's completent operator (~) to get the index of the first elemnt that was lower</returns>
        </member>
        <member name="M:SysWeaver.BinarySearch.Find``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Find a value in list
            </summary>
            <typeparam name="E">The type of the value to find</typeparam>
            <param name="container">The data to search in</param>
            <param name="index">The start index (typically zero)</param>
            <param name="length">The length of the range to search in (typically the length of the container)</param>
            <param name="value">The value to find</param>
            <param name="comparer">An optional comparer</param>
            <returns>The index containing the <paramref name="value"/> or negative if not found, use the two's completent operator (~) to get the index of the first elemnt that was lower</returns>
        </member>
        <member name="M:SysWeaver.BinarySearch.Find``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Find a value in list
            </summary>
            <typeparam name="E">The type of the value to find</typeparam>
            <param name="container">The data to search in</param>
            <param name="value">The value to find</param>
            <param name="comparer">An optional comparer</param>
            <returns>The index containing the <paramref name="value"/> or negative if not found, use the two's completent operator (~) to get the index of the first elemnt that was lower</returns>
        </member>
        <member name="T:SysWeaver.BlockUntilChange">
            <summary>
            Provides a mechanism to async wait for a "change".
            Changes are tracked using a "change id" that is supplied internally.
            </summary>
        </member>
        <member name="M:SysWeaver.BlockUntilChange.#ctor(System.Boolean)">
            <summary>
            Provides a mechanism to async wait for a "change".
            Changes are tracked using a "change id" that is supplied internally.
            </summary>
            <param name="startWithChange">If true, the supplied id starts at 1, else 0 (listeners should start with the change id 0, so if this is true, the first wait for change will return immediatelty)</param>
        </member>
        <member name="M:SysWeaver.BlockUntilChange.Change">
            <summary>
            Triggers a change, any task waiting for a change on this instance will continue and return a new change id.
            </summary>
            <returns>The new change id</returns>
        </member>
        <member name="T:SysWeaver.BlockUntilValueChange">
            <summary>
            Provides a mechanism to async wait for a "change".
            Changes are tracked using a "change id" that is supplied by the calling code.
            </summary>
        </member>
        <member name="M:SysWeaver.BlockUntilValueChange.#ctor(System.Int64)">
            <summary>
            Provides a mechanism to async wait for a "change".
            Changes are tracked using a "change id" that is supplied by the calling code.
            </summary>
            <param name="startChangeId">The change id to start with</param>
        </member>
        <member name="M:SysWeaver.BlockUntilValueChange.Change(System.Int64)">
            <summary>
            Triggers a change, any task waiting for a change on this instance will continue and return the new change id.
            </summary>
            <param name="newChangeId"></param>
        </member>
        <member name="M:SysWeaver.BlockUntil.Dispose">
            <summary>
            Any waiting tasks will continue returning the currentChangeId change id.
            </summary>
        </member>
        <member name="P:SysWeaver.BlockUntil.TotalAllocCount">
            <summary>
            Total number of wait objects allocated
            </summary>
        </member>
        <member name="P:SysWeaver.BlockUntil.AllocatedUnused">
            <summary>
            Total number of wait objects that are unused, roughly 100 is allowed.
            </summary>
        </member>
        <member name="M:SysWeaver.BlockUntil.WaitForChange(System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait until a change is performed or the wait is aborted.
            </summary>
            <param name="currentChangeId">The last change id known to the caller, typiacally start at 0 and then update with the result of this method</param>
            <param name="msToWait">Number of ms to wait, when expired, the method will return with the same change id.</param>
            <param name="cancel">Custom cancellation, if triggered, the method will return with the same change id.</param>
            <returns>The new change id (if changed), or the currentChangeId change id if the wait is aborted</returns>
        </member>
        <member name="M:SysWeaver.BlockUntil.WaitForChange(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Wait until a change is performed or the wait is aborted.
            </summary>
            <param name="currentChangeId">The last change id known to the caller, typiacally start at 0 and then update with the result of this method</param>
            <param name="cancel">Custom cancellation, if triggered, the method will return with the same change id.</param>
            <returns>The new change id (if changed), or the currentChangeId change id if the wait is aborted</returns>
        </member>
        <member name="M:SysWeaver.BlockUntil.WaitForChange(System.Int64,System.Int32)">
            <summary>
            Wait until a change is performed or the wait is aborted.
            </summary>
            <param name="currentChangeId">The last change id known to the caller, typiacally start at 0 and then update with the result of this method</param>
            <param name="msToWait">Number of ms to wait, when expired, the method will return with the same change id.</param>
            <returns>The new change id (if changed), or the currentChangeId change id if the wait is aborted</returns>
        </member>
        <member name="M:SysWeaver.BlockUntil.WaitForChange(System.Int64)">
            <summary>
            Wait until a change is performed or the wait is aborted.
            </summary>
            <param name="currentChangeId">The last change id known to the caller, typiacally start at 0 and then update with the result of this method</param>
            <returns>The new change id (if changed), or the currentChangeId change id if the wait is aborted</returns>
        </member>
        <member name="T:SysWeaver.ByteArrayEqualityComparer">
            <summary>
            An equality comparer for byte array content
            </summary>
        </member>
        <member name="F:SysWeaver.ByteArrayEqualityComparer.Instance">
            <summary>
            An equality comparer for byte array content
            </summary>
        </member>
        <member name="M:SysWeaver.ByteArrayExtensions.ToHex(System.Byte[])">
            <summary>
            Converts some data into a hexadecimal string
            </summary>
            <param name="bytes">The data</param>
            <returns>A hexadecimal string</returns>
        </member>
        <member name="M:SysWeaver.ByteArrayExtensions.FromHex(System.ReadOnlySpan{System.Char})">
            <summary>
            Convert a hexadecimal string to a byte array
            </summary>
            <param name="hex">Hexadecimal string</param>
            <returns>The bytes encoded in the hexadecimal string</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="F:SysWeaver.CharExt.FastLower">
            Make an culture invariant upper case version of a char
        </member>
        <member name="F:SysWeaver.CharExt.FastUpper">
            Make an culture invariant upper case version of a char
        </member>
        <member name="M:SysWeaver.CharExt.FastToLower(System.Char)">
            <summary>
            Make an culture invariant lower case version of a char
            </summary>
            <param name="c">The char to transform into a culture invariant lower case</param>
            <returns>Culture invariant lower case char</returns>
        </member>
        <member name="M:SysWeaver.CharExt.FastToUpper(System.Char)">
            <summary>
            Make an culture invariant upper case version of a char
            </summary>
            <param name="c">The char to transform into a culture invariant upper case</param>
            <returns>Culture invariant upper case char</returns>
        </member>
        <member name="M:SysWeaver.CharExt.HexValue(System.Char)">
            <summary>
            Convert a hexadecimal character to it's decimal value, only '0' - '9', 'a' - 'f' or 'A' - 'F' is valid, will throw on invalid input
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:SysWeaver.Chart.ChartExportInputTypes">
            <summary>
            The type of data that the expåort function expects
            </summary>
        </member>
        <member name="F:SysWeaver.Chart.ChartExportInputTypes.Data">
            <summary>
            Expects an object of type ChartJsConfig 
            </summary>
        </member>
        <member name="F:SysWeaver.Chart.ChartExportInputTypes.Png">
            <summary>
            Expects a byte array with a Png
            </summary>
        </member>
        <member name="F:SysWeaver.Chart.ChartExportInputTypes.Svg">
            <summary>
            Expectes a string containing an svg
            </summary>
        </member>
        <member name="F:SysWeaver.Chart.ChartExportOptions.Filename">
            <summary>
            Suggested filename (no extension or path)
            </summary>
        </member>
        <member name="F:SysWeaver.Chart.ChartExportOptions.SwapLandscapePortrait">
            <summary>
            True to swap the auto detcted landscape / portrait mode
            </summary>
        </member>
        <member name="T:SysWeaver.Chart.IChartExporter">
            <summary>
            Interface that can be used for exporting data
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IChartExporter.Name">
            <summary>
            Menu name
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IChartExporter.Desc">
            <summary>
            Menu description
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IChartExporter.Icon">
            <summary>
            Menu icon
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IChartExporter.Order">
            <summary>
            Used to sort data exportes
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IChartExporter.RequireUser">
            <summary>
            Require the user to be logged in.
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IChartExporter.InputType">
            <summary>
            The type of data that the Export method expects
            </summary>
        </member>
        <member name="M:SysWeaver.Chart.IChartExporter.Export(System.Object,System.Object,SysWeaver.Chart.ChartExportOptions)">
            <summary>
            Export a chart to a file
            </summary>
            <param name="data">Depends on the InputType</param>
            <param name="context">A HttpServerRequest context</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.Chart.IHaveChartExporters">
            <summary>
            Service objects implementing this interface can expose chart exportes
            </summary>
        </member>
        <member name="P:SysWeaver.Chart.IHaveChartExporters.ChartExporters">
            <summary>
            Chart exports (can be use to export charts)
            </summary>
        </member>
        <member name="P:SysWeaver.ICodeGenerator.StrLen">
            <summary>
            Length of string
            </summary>
        </member>
        <member name="P:SysWeaver.ICodeGenerator.GroupStrLen">
            <summary>
            Length of string with grouping
            </summary>
        </member>
        <member name="P:SysWeaver.ICodeGenerator.MaxValue">
            <summary>
            The maximum allowed value
            </summary>
        </member>
        <member name="P:SysWeaver.ICodeGenerator.MaxBits">
            <summary>
            Number of bits that can be used
            </summary>
        </member>
        <member name="P:SysWeaver.ICodeGenerator.MaxInput">
            <summary>
            Max input value 
            </summary>
        </member>
        <member name="P:SysWeaver.ICodeGenerator.InputMask">
            <summary>
            Bit mask to apply to get within the supported interval
            </summary>
        </member>
        <member name="M:SysWeaver.ICodeGenerator.Encode(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Encode a value in the [0, MaxValue) interval.
            </summary>
            <param name="value">The value to encode in the [0, MaxValue)</param>
            <param name="upperCase">Output upper or lower case letters</param>
            <param name="group">Add a hypen to create groups</param>
            <returns>A string with the encoded value</returns>
        </member>
        <member name="M:SysWeaver.ICodeGenerator.Decode(System.String)">
            <summary>
            Decodes a value from a string
            </summary>
            <param name="value">A value encoded as a string</param>
            <returns>The value or -1 if the input string is invalid</returns>
        </member>
        <member name="T:SysWeaver.AlphaNumericCodeGenerator">
            <summary>
            Bundles similar symbols to the same meaning, ex: 1il, o0, vw etc.
            A class that converts an integer range into a string of alphanumerics.
            The valid range starts at 0 and the max value depends on the string length.
            Length 2 = 10 bits = [0, 1023]
            Length 4 = 20 bits = [0, 1048575]
            Length 6 = 30 bits = [0, 1073741823]
            ..and so on.
            </summary>
        </member>
        <member name="F:SysWeaver.AlphaNumericCodeGenerator.Gens">
            <summary>
            Cached instances
            </summary>
        </member>
        <member name="M:SysWeaver.AlphaNumericCodeGenerator.Get(System.Int32)">
            <summary>
            Get a code generator with the specified length
            </summary>
            <param name="strLen">The desired length, every char add 5 bits of possible data</param>
            <returns>A code generator</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:SysWeaver.AlphaNumericCodeGenerator.StrLen">
            <summary>
            Length of string
            </summary>
        </member>
        <member name="P:SysWeaver.AlphaNumericCodeGenerator.GroupStrLen">
            <summary>
            Length of string with grouping
            </summary>
        </member>
        <member name="P:SysWeaver.AlphaNumericCodeGenerator.MaxValue">
            <summary>
            The maximum allowed value
            </summary>
        </member>
        <member name="P:SysWeaver.AlphaNumericCodeGenerator.MaxBits">
            <summary>
            Number of bits that can be used
            </summary>
        </member>
        <member name="P:SysWeaver.AlphaNumericCodeGenerator.MaxInput">
            <summary>
            Max input value 
            </summary>
        </member>
        <member name="P:SysWeaver.AlphaNumericCodeGenerator.InputMask">
            <summary>
            Bit mask to apply to get within the supported interval
            </summary>
        </member>
        <member name="M:SysWeaver.AlphaNumericCodeGenerator.Encode(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Encode a value in the [0, MaxInput) interval.
            </summary>
            <param name="value">The value to encode in the [0, MaxInput)</param>
            <param name="upperCase">Output upper or lower case letters</param>
            <param name="group">Add a hypen every 4th character to create groups</param>
            <returns>A string with the encoded value</returns>
        </member>
        <member name="M:SysWeaver.AlphaNumericCodeGenerator.Decode(System.String)">
            <summary>
            Decodes a value from a string
            </summary>
            <param name="value">A value encoded as a string</param>
            <returns>The value or -1 if the input string is invalid</returns>
        </member>
        <member name="T:SysWeaver.NumericCodeGenerator">
            <summary>
            Bundles similar symbols to the same meaning, ex: 1il, o0 etc.
            A class that converts an integer range into a string of alphanumerics.
            The valid range starts at 0 and the max value depends on the string length.
            Length 2 = 10 bits = [0, 1023]
            Length 4 = 20 bits = [0, 1048575]
            Length 6 = 30 bits = [0, 1073741823]
            ..and so on.
            </summary>
        </member>
        <member name="F:SysWeaver.NumericCodeGenerator.Gens">
            <summary>
            Cached instances
            </summary>
        </member>
        <member name="M:SysWeaver.NumericCodeGenerator.Get(System.Int32)">
            <summary>
            Get a code generator with the specified length
            </summary>
            <param name="strLen">The desired length, every char add 5 bits of possible data</param>
            <returns>A code generator</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:SysWeaver.NumericCodeGenerator.StrLen">
            <summary>
            Length of string
            </summary>
        </member>
        <member name="P:SysWeaver.NumericCodeGenerator.GroupStrLen">
            <summary>
            Length of string with grouping
            </summary>
        </member>
        <member name="P:SysWeaver.NumericCodeGenerator.MaxValue">
            <summary>
            The maximum allowed value
            </summary>
        </member>
        <member name="P:SysWeaver.NumericCodeGenerator.MaxBits">
            <summary>
            Number of bits that can be used
            </summary>
        </member>
        <member name="P:SysWeaver.NumericCodeGenerator.MaxInput">
            <summary>
            Max input value 
            </summary>
        </member>
        <member name="P:SysWeaver.NumericCodeGenerator.InputMask">
            <summary>
            Bit mask to apply to get within the supported interval
            </summary>
        </member>
        <member name="M:SysWeaver.NumericCodeGenerator.Encode(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Encode a value in the [0, MaxInput) interval.
            </summary>
            <param name="value">The value to encode in the [0, MaxInput)</param>
            <param name="upperCase">Output upper or lower case letters</param>
            <param name="group">Add a hypen every 4th character to create groups</param>
            <returns>A string with the encoded value</returns>
        </member>
        <member name="M:SysWeaver.NumericCodeGenerator.Decode(System.String)">
            <summary>
            Decodes a value from a string
            </summary>
            <param name="value">A value encoded as a string</param>
            <returns>The value or -1 if the input string is invalid</returns>
        </member>
        <member name="T:SysWeaver.CollectionExt">
            <summary>
            Contains generic collection extensions
            </summary>
        </member>
        <member name="M:SysWeaver.CollectionExt.NullableCount``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns the Count of the collection if its non-null, return 0 if the collection is null
            </summary>
            <typeparam name="T">Generic type argumet of the collection</typeparam>
            <param name="t">The collection instance</param>
            <returns>The number of items in the collection or 0 if <paramref name="t"/> is null</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.NullableCountRo``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Returns the Count of the readonly collection if its non-null, return 0 if the readonly collection is null
            </summary>
            <typeparam name="T">Generic type argumet of the readonly collection</typeparam>
            <param name="t">The readonly collection instance</param>
            <returns>The number of items in the collection or 0 if <paramref name="t"/> is null</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.Nullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty enumerable if the supplied parameter is null, this makes the code cleaner when iterating over collections etc that might be null
            </summary>
            <typeparam name="T">Generic type argumet of the enumerable</typeparam>
            <param name="t">The enumerable instance</param>
            <returns>The instance <paramref name="t"/> if it's non-null, else an empty collection instance</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Returns true if the enumerable is empty
            </summary>
            <param name="t">The enumerable instance</param>
            <returns>True if the instance <paramref name="t"/> is empty, else false</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index (position) of the first element that return true by the predicated
            </summary>
            <typeparam name="T">Generic type argumet of the enumerable</typeparam>
            <param name="t">The enumerable instance</param>
            <param name="predicate">A function that is evaluated for each value, return true to stop enumeration and return the index</param>
            <returns>The index of the element that first returned true from the predicate, or -1 if not found</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index (position) of the last element that return true by the predicated
            </summary>
            <typeparam name="T">Generic type argumet of the enumerable</typeparam>
            <param name="t">The enumerable instance</param>
            <param name="predicate">A function that is evaluated for each value, return true to return the index</param>
            <returns>The index of the element that last returned true from the predicate, or -1 if not found</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.ArrayOrNullIfEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            If the collection is null or empty return null, else return an array with the elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection to convert to an array</param>
            <returns>null if the collection is null or empty, else an array of the elements</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.ArrayOrNullIfEmpty``1(``0[])">
            <summary>
            If the array is null or empty return null, else return it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array to check</param>
            <returns>null if the array is null or empty, else the array</returns>
        </member>
        <member name="M:SysWeaver.CollectionExt.Drain``1(System.Collections.Concurrent.ConcurrentQueue{``0},System.Int32)">
            <summary>
            Drain the queue and optionally try to keep a set number of entries
            </summary>
            <typeparam name="T"></typeparam>
            <param name="col"></param>
            <param name="keepAtLeast">The number of items to keep (in rare cases when multiple threads are draining the queue, the number of items can drop below)</param>
        </member>
        <member name="M:SysWeaver.CollectionExt.Drain``1(System.Collections.Generic.LinkedList{``0},System.Int32)">
            <summary>
            Drain a linked list (last) optionally try to keep a set number of entries
            </summary>
            <typeparam name="T"></typeparam>
            <param name="col"></param>
            <param name="keepAtLeast">The number of items to keep</param>
        </member>
        <member name="M:SysWeaver.ColorTools.HsvToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Convert a HSV value to rgb uint (0xrrggbb)
            </summary>
            <param name="h">Hue in degrees [0, 360] </param>
            <param name="s">Saturation in [0, 1]</param>
            <param name="v">Value in [0, 1]</param>
            <returns>An rgb value as an uint (0xrrggbb)</returns>
        </member>
        <member name="M:SysWeaver.ColorTools.HsvToRgb(System.Double@,System.Double@,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Convert a HSV value to rgb
            </summary>
            <param name="r">Red result in [0, 1]</param>
            <param name="g">Green result in [0, 1]</param>
            <param name="b">Blue result in [0, 1]</param>
            <param name="h">Hue in degrees [0, 360] </param>
            <param name="s">Saturation in [0, 1]</param>
            <param name="v">Value in [0, 1]</param>
        </member>
        <member name="T:SysWeaver.CompactAsciiString">
            <summary>
            Class that takes some data and represents it as a compact string.
            </summary>
        </member>
        <member name="F:SysWeaver.CompactAsciiString.Default">
            <summary>
            Should contain chars that doesn't expand "in transit" (such as serialized json strings, sql requests etc).
            </summary>
        </member>
        <member name="F:SysWeaver.CompactAsciiString.Secure">
            <summary>
            Should only contain chars that can be used "everywhere", uri's, xml/html attributes and values, js strings etc.
            </summary>
        </member>
        <member name="M:SysWeaver.CompactAsciiString.Encode(System.Int64)">
            <summary>
            Encode an 64-bit signed integer.
            </summary>
            <param name="value">The value to encode</param>
            <returns>The compact string that represents it</returns>
        </member>
        <member name="M:SysWeaver.CompactAsciiString.Encode(System.UInt64)">
            <summary>
            Encode an 64-bit unsiged integer.
            </summary>
            <param name="value">The value to encode</param>
            <returns>The compact string that represents it</returns>
        </member>
        <member name="M:SysWeaver.CompactAsciiString.DecodeInt64(System.String)">
            <summary>
            Decode a compact string to the 64-bit signed integer that it represents.
            </summary>
            <param name="compactString">The compact value representation</param>
            <returns>The value that was represented by the string</returns>
        </member>
        <member name="M:SysWeaver.CompactAsciiString.DecodeInt32(System.String)">
            <summary>
            Decode a compact string to the 32-bit signed integer that it represents.
            </summary>
            <param name="compactString">The compact value representation</param>
            <returns>The value that was represented by the string</returns>
        </member>
        <member name="M:SysWeaver.CompactAsciiString.DecodeUInt64(System.String)">
            <summary>
            Decode a compact string to the 64-bit unsigned integer that it represents.
            </summary>
            <param name="compactString">The compact value representation</param>
            <returns>The value that was represented by the string</returns>
        </member>
        <member name="M:SysWeaver.CompactAsciiString.DecodeUInt32(System.String)">
            <summary>
            Decode a compact string to the 32-bit unsigned integer that it represents.
            </summary>
            <param name="compactString">The compact value representation</param>
            <returns>The value that was represented by the string</returns>
        </member>
        <member name="F:SysWeaver.CompactCharDictionary`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:SysWeaver.CompactStringTree">
            <summary>
            A string tree stores a bunch of strings in a way that makes it fast to check if a test string starts with ANY of the contained strings.
            </summary>
        </member>
        <member name="P:SysWeaver.CompactStringTree.IsCaseInSensitive">
            <summary>
            True if the tree is case in-sensitive
            </summary>
        </member>
        <member name="M:SysWeaver.CompactStringTree.Build(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="strings">The strings to build a tree from, may not contain null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.Add(System.String,System.Boolean,SysWeaver.CompactStringTree)">
            <summary>
            Add a string to a new or existing tree
            </summary>
            <param name="text">The string to add, may not be null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree, if the tree already exists, the casing from that tree is used</param>
            <param name="parent">An existing tree</param>
            <returns>The new tree (or the existing)</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.TryAdd(SysWeaver.CompactStringTree@,System.String,System.Boolean)">
            <summary>
            Try to add a string to a new or existing tree
            </summary>
            <param name="parent">An existing or new tree to update</param>
            <param name="text">The string to add, may not be null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree, if the tree already exists, the casing from that tree is used</param>
            <returns>True if the string was added, false if it already existed</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.StartsWithAny(System.String,System.Int32)">
            <summary>
            Find the longest string (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>The longest found match or null if no match is found</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.Contains(System.String,System.Int32)">
            <summary>
            Check if a string is already contained in the tree
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>True if string exists</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.AllStartsWithAny(System.String,System.Int32)">
            <summary>
            Find all matching strings (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>A list of matches, orderer from shortest match to longest match</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.GetAll">
            <summary>
            Get all string contained in the string tree, in any order
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.GetAllInOrder">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.GetAllInReverseOrder">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.CompactStringTree.Clone">
            <summary>
            Make a copy of a tree
            </summary>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.CompactStringTreeExt">
            <summary>
            Extension methods to CompactStringTree instances
            </summary>
        </member>
        <member name="M:SysWeaver.CompactStringTreeExt.IndexOfAny(SysWeaver.CompactStringTree,System.String@,System.String,System.Int32)">
            <summary>
            Find the index of the first matching string (from the tree)
            </summary>
            <param name="tree">The tree to use</param>
            <param name="match">The first matching string (if found) or null</param>
            <param name="text">The text to find the first matching string in</param>
            <param name="start">An optional start offset</param>
            <returns>The position of the first matching string or -1 if no match is found</returns>
        </member>
        <member name="M:SysWeaver.CompactStringTreeExt.LastIndexOfAny(SysWeaver.CompactStringTree,System.String@,System.String,System.Int32)">
            <summary>
            Find the index of the last matching string (from the tree)
            </summary>
            <param name="tree">The tree to use</param>
            <param name="match">The last  matching string (if found) or null</param>
            <param name="text">The text to find the last  matching string in</param>
            <param name="start">An optional start offset, or -1 to start at the end of the string</param>
            <returns>The position of the last  matching string or -1 if no match is found</returns>
        </member>
        <member name="T:SysWeaver.ConcurrentCount`1">
            <summary>
            Concurrent collection for keeping track of some counts
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:SysWeaver.ConcurrentCount`1.GetValue(`0)">
            <summary>
            Returns the current count of an item, 0 if not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.Config">
            <summary>
            Get configuration settings from the ApplicationName.Config.json file.
            Folders can be overridden using the key "FileHashFolders" in the ApplicationName.Config.json file.
            </summary>
        </member>
        <member name="P:SysWeaver.CredentialParams.User">
            <summary>
            Username or key
            </summary>
        </member>
        <member name="P:SysWeaver.CredentialParams.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:SysWeaver.CredentialParams.CredFile">
            <summary>
            Filename, if specified the user and password is read from the file (should be single line of text in the user:key format)
            </summary>
        </member>
        <member name="M:SysWeaver.CredentialParams.GetUserPassword(System.String@,System.String@,System.Boolean)">
            <summary>
            Get the credentials (may be from the supplied file, no caching is done so don't call frequently)
            </summary>
            <param name="user">The username</param>
            <param name="password">The password</param>
            <param name="mustBeValid">Throw if the user or password is empty</param>
            <returns>False if the user or password is empty, else True</returns>
        </member>
        <member name="F:SysWeaver.Data.BaseTableData.RowCount">
            <summary>
            Rows in the data, this is the first row + number of returned rows + look ahead rows (that are avasilable).
            Example (page with 20 items, stepping max 3 pages forward at a time):
                Request:
                    Row = 20
                    MaxRowCount = 20
                    LookAhead = 20 * 3 + 1
                Response:
                    RowCount = 35 => There are 35 rows total, 15 rows will be returned for page 2 and no more pages exist.
                    RowCount = 50 => There are 50 rows total, 20 rows will be returned for page 2 and a page 3 exists.
                    RowCount = 90 => There are 90 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 100 => There are 100 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 101 => There are at least 101 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5, 6 exists and maybe more pages.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.BaseTableData.Cols">
            <summary>
            Columns, can be null if the request change counter matches the internal change counter (no changes)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.BaseTableData.Rows">
            <summary>
            Data rows
            </summary>
        </member>
        <member name="F:SysWeaver.Data.BaseTableData.Title">
            <summary>
            Title of the table.
            </summary>
        </member>
        <member name="T:SysWeaver.Data.IHaveTableDataExporters">
            <summary>
            Service objects implementing this interface can expose table exportes
            </summary>
        </member>
        <member name="P:SysWeaver.Data.IHaveTableDataExporters.TableDataExporters">
            <summary>
            Table exports (can be use to export tables)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.ITableDataExporter">
            <summary>
            Interface that can be used for exporting data
            </summary>
        </member>
        <member name="P:SysWeaver.Data.ITableDataExporter.Name">
            <summary>
            Menu name
            </summary>
        </member>
        <member name="P:SysWeaver.Data.ITableDataExporter.Desc">
            <summary>
            Menu description
            </summary>
        </member>
        <member name="P:SysWeaver.Data.ITableDataExporter.Icon">
            <summary>
            Menu icon
            </summary>
        </member>
        <member name="P:SysWeaver.Data.ITableDataExporter.Order">
            <summary>
            Used to sort data exportes
            </summary>
        </member>
        <member name="P:SysWeaver.Data.ITableDataExporter.RequireUser">
            <summary>
            Require the user to be logged in.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.ITableDataExporter.Export(SysWeaver.Data.BaseTableData,System.Object,SysWeaver.Data.TabelDataExportOptions)">
            <summary>
            Export a data table to a file
            </summary>
            <param name="tableData">The data to export</param>
            <param name="context">The HttpServerRequest context (wrapped in an object for exporters that don't need the dependency)</param>
            <param name="options">Export options</param>
            <returns>A file or linq in memory</returns>
        </member>
        <member name="F:SysWeaver.Data.TabelDataExportOptions.Filename">
            <summary>
            Suggested filename (no extension or path)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TabelDataExportOptions.NoHeaders">
            <summary>
            Don't output any headers
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TabelDataExportOptions.Portrait">
            <summary>
            True to output in portrait mode
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableData">
            <summary>
            Represent rows of data in a type agnostic manner
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableData.Cc">
            <summary>
            A change counter for the column information, if the request Cc is equal to this, no column information is sent
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableData.RefreshRate">
            <summary>
            Number of ms to wait before a new refresh
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataActionsAttribute">
            <summary>
            Action buttons.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataActionsAttribute.#ctor(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Action buttons.
            </summary>
            <param name="text">Text of the button</param>
            <param name="title">Title (tool tip) of the button</param>
            <param name="url">Url to the get request that will be performed on click.\nIf it start's with a '@' the url will be opened in a new tab.\nIf it start's with a '&amp;' the url will be opened in the same tab.</param>
            <param name="icon">Icon class name or url</param>
            <param name="moreButtons">An optional array of extra buttons, 4 strings per button following a: "text", "title", "url" and "icon" pattern</param>
        </member>
        <member name="M:SysWeaver.Data.TableDataActionsAttribute.#ctor(System.String[])">
            <summary>
            Action buttons.
            </summary>
            <param name="buttons">An array of buttons, 4 strings per button following a: "text", "title", "url" and "icon" pattern</param>
        </member>
        <member name="T:SysWeaver.Data.TableDataBooleanToggleAttribute">
            <summary>
            Add a boolean toggle button.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataBooleanToggleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a boolean toggle button.
            </summary>
            <param name="toggleApiUrl">The get request to perform to toggle the value.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </param>
            <param name="trueText">The text to display when the value is true.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </param>
            <param name="falseText">The text to display when the value is false.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </param>
            <param name="trueTitle">The title (tooltip) when the value is true.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </param>
            <param name="falseTitle">The title (tooltip) when the value is false.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </param>
        </member>
        <member name="T:SysWeaver.Data.TableDataByteSizeAttribute">
            <summary>
            Format the value using bytes, kb, Mb and so on
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataByteSizeAttribute.#ctor">
            <summary>
            Format the value using bytes, kb, Mb and so on
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataByteSpeedAttribute">
            <summary>
            Format the value using bytes/s, kb/s, Mb/s and so on
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataByteSpeedAttribute.#ctor">
            <summary>
            Format the value using bytes/s, kb/s, Mb/s and so on
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataBaseColumn">
            <summary>
            Represents a column of data
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataBaseColumn.Name">
            <summary>
            The unique name/id of this column
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataBaseColumn.Type">
            <summary>
            The .NET type name of the data represented
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataBaseColumn.Desc">
            <summary>
            Description of the data (shown as a tool tip)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataColumn">
            <summary>
            Represents a column of data
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumn.Format">
            <summary>
            Formatting hint (used when displaying the table), depends on Type etc.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumn.Title">
            <summary>
            The column title (used when displaying the table, default is a cleaned up version of the Name).
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumn.Props">
            <summary>
            Column properties (flags)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataColumnProps">
            <summary>
            Column properties (flags)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.CanSort">
            <summary>
            Set if the column may be sorted
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.SortedDesc">
            <summary>
            Set if the column is sorted in desceding order by default
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.Hide">
            <summary>
            Set if the column should be hidden
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.Filter">
            <summary>
            Basic filtering is possible (equal, not equal)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.TextFilter">
            <summary>
            Advanced text filtering (contains, starts with, ends with)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.OrderFilter">
            <summary>
            Order filtering is possible (greater than, less than, greater or equal, less or equal)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.CanChart">
            <summary>
            The column can be used to create a chart
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsKey">
            <summary>
            The column can be used as a key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey1">
            <summary>
            The column is the first part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey2">
            <summary>
            The column is the second part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey3">
            <summary>
            The column is the third part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey4">
            <summary>
            The column is the fourth part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey5">
            <summary>
            The column is the fifth part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey6">
            <summary>
            The column is the sixth part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsPrimaryKey7">
            <summary>
            The column is the seventh part of the primary key (typically for a chart / graph)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataColumnProps.IsComputed">
            <summary>
            If true the column is computed (and can't be searched etc)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataConsts">
            <summary>
            Helpers and constants for table data
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.GoogleSearchFormat">
            <summary>
            String format for an url for searching the web
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.GoogleSearchTitleFormat">
            <summary>
            String format for the title of a search
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.WikipediaFormat">
            <summary>
            String format for an url for viewing a wikipedia page
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.WikipediaTitleFormat">
            <summary>
            String format for the title of a wikipedia page
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.GoogleMapsPlaceFormat">
            <summary>
            String format for an url for viewing a google maps place page
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.GoogleMapsPlaceTitleFormat">
            <summary>
            String format for the title of a google maps place page
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.FileExtensionSearchFormat">
            <summary>
            File extension search
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.MimeSearchFormat">
            <summary>
            Mime search
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.EncodingSearchFormat">
            <summary>
            Mime search
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.ImgMaxWidth">
            <summary>
            Default max image width
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.ImgMaxHeight">
            <summary>
            Default max image height
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.ExternalInfoPath">
            <summary>
            Path used for external information redirects
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataConsts.ExternalInfoRoot">
            <summary>
            Absolute root path for external information
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataDescAttribute">
            <summary>
            Put on a member to set it's description, default is the code comments
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataDurationAttribute">
            <summary>
            Format valus as as duration (time span, integer or float)
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataDurationAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Format value.
            </summary>
            <param name="replaceZeroWith">Replace exact zero with this text string, null to write zero as is</param>
            <param name="textFormat">
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="titleFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="copyOnClick">Copy the original value to the clipboard on click.</param>
        </member>
        <member name="M:SysWeaver.Data.TableDataDurationAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Format value.
            </summary>
            <param name="replaceZeroWith">Replace exact zero with this text string, null to write zero as is</param>
            <param name="textFormat">
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="titleFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="copyOnClickFormat">Copy the value to the clipboard on click, using this string formatter.
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
        </member>
        <member name="T:SysWeaver.Data.TableDataJsonAttribute">
            <summary>
            Format the text as json.
            Will show a capped version of the text.
            Will show the beutified json on click.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataJsonAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Format the text as json.
            Will show a capped version of the text.
            Will show the beutified json on click.
            </summary>
            <param name="maxLength">Maximum number of chars to show</param>
            <param name="titleFormat">
            {0} = Value.
            {1} = Formatted value.
            {2} = Capped value.
            </param>
            <param name="copyOnClick">Copy the original value to the clipboard on click (if not null).
            {0} = Value.
            {1} = Formatted value.
            {2} = Capped value.
            </param>
        </member>
        <member name="T:SysWeaver.Data.TableDataTextAttribute">
            <summary>
            Format some long multiline text.
            Will show a capped version of the text.
            Will show the full version of the text on click.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataTextAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Format some long multiline text.
            Will show a capped version of the text.
            Will show the full version of the text on click.
            </summary>
            <param name="maxLength">Maximum number of chars to show</param>
            <param name="titleFormat">
            {0} = Value.
            {1} = Capped value.
            </param>
            <param name="copyOnClick">Copy the original value to the clipboard on click (if not null).
            {0} = Value.
            {1} = Capped value.
            </param>
        </member>
        <member name="T:SysWeaver.Data.TableDataMdAttribute">
            <summary>
            Format some long multiline Mark Down (MD) text.
            Will show a capped version of the text (not formatted using MD).
            Will show the full version of the text on click.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataMdAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Format some long multiline Mark Down (MD) text.
            Will show a capped version of the text (not formatted using MD).
            Will show the full version of the text on click.
            </summary>
            <param name="maxLength">Maximum number of chars to show</param>
            <param name="titleFormat">
            {0} = Value.
            {1} = Capped value.
            </param>
            <param name="copyOnClick">Copy the original value to the clipboard on click (if not null).
            {0} = Value.
            {1} = Capped value.
            </param>
        </member>
        <member name="T:SysWeaver.Data.TableDataExpandAttribute">
            <summary>
            Put on a type to expand it when used in a data table
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataExpandAttribute.#ctor(System.String,System.String)">
            <summary>
            Make the object expand into columns
            </summary>
            <param name="memberNamePrefix">The name prefix to use.
            {0} = Member name.
            </param>
            <param name="titlePrefix">The title prefix to use.
            {0} = Member name.
            {1} = Decamel cased member name.
            </param>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterBase.Invert">
            <summary>
            True to invert the filter result (i.e keep entries that would otherwise be rejected)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterBase.CaseSensitive">
            <summary>
            Use case sensitive operations if applicable
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterBase.Op">
            <summary>
            The filter operation to use
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterBase.Value">
            <summary>
            The value to use for this operation, some ops require more than one, use comma separation in that case
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilter.ColName">
            <summary>
            Name of the column to apply this filter to
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.Equals">
            <summary>
            The row value must be equal to the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.NotEqual">
            <summary>
            The row value may not be equal to the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.LessThan">
            <summary>
            The row value must be less than the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.GreaterThan">
            <summary>
            The row value must be greater than the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.LessEqual">
            <summary>
            The row value must be less or equal to the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.GreaterEqual">
            <summary>
            The row value must be greater or equal to the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.Contains">
            <summary>
            The row value must contain the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.StartsWith">
            <summary>
            The row value must start with the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.EndsWith">
            <summary>
            The row value must end with the filter value
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.AnyOf">
            <summary>
            The row value must be equal to any of the comma separated filter values
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.NoneOf">
            <summary>
            The row value may not be equal to any of the comma separated filter values
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.InRange">
            <summary>
            [min, max) The row value must be greater or equal to min AND less than max (2 comma separated values in the filter value)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFilterOps.OutsideRange">
            <summary>
            The row value must be less than min OR greater than max (2 comma separated values in the filter value)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataFormatAttribute">
            <summary>
            Format value.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataFormatAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Format value.
            </summary>
            <param name="textFormat">
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="titleFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="copyOnClick">Copy the original value to the clipboard on click.</param>
        </member>
        <member name="M:SysWeaver.Data.TableDataFormatAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Format value.
            </summary>
            <param name="textFormat">
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="titleFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="copyOnClickFormat">Copy the value to the clipboard on click, using this string formatter.
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
        </member>
        <member name="M:SysWeaver.Data.TableDataFormatAttribute.#ctor(SysWeaver.Data.TableDataFormats,System.String,System.String,System.Boolean)">
            <summary>
            Format value using a specific formatter.
            </summary>
            <param name="format">The specific format to use</param>
            <param name="textFormat">
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="titleFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="copyOnClick">Copy the original value to the clipboard on click.</param>
        </member>
        <member name="M:SysWeaver.Data.TableDataFormatAttribute.#ctor(SysWeaver.Data.TableDataFormats,System.String,System.String,System.String)">
            <summary>
            Format value using a specific formatter.
            </summary>
            <param name="format">The specific format to use
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="textFormat">
            {0} = Value.
            {1} = Next value (must exist). 
            </param>
            <param name="titleFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="copyOnClickFormat">Copy the value to the clipboard on click, using this string formatter.
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Default">
            <summary>
            First argument is the text formatting:
            {0} = Value.
            {1} = Next value (must exist). 
            The second argument is the title formatting. 
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            If the third argument is true, the original value will be copied to the clipboard on click.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Number">
            <summary>
            The first argument is the number of decimals. 
            The second argument is the text formatting.
            {0} = Formatted value (decimals and thousands separator applied)
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            The third argument is the title formatting:
            {0} = Formatted value (decimals and thousands separator applied)
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            {3} = The text (after formatting). 
            If the fourth argument is true, the original value will be copied to the clipboard on click.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Url">
            <summary>
            First argument is the string format of the text to display where: 
            {0} = This value. 
            {1} = Next value (must exist). 
            Second argument is the string format of the url where: 
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The text (after formatting). 
            Third argument is the string format of the title where: 
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The text (after formatting). 
            {3} = The url (after formatting). 
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Tags">
            <summary>
            List of tags separated by a comma, ex: "Banana, Apple, Orange". 
            An optional value can be present using a colon, ex: "Banana:Yellow, Apple:Green, Orange:Orange". 
            First argument is the value formatting: 
            {0} = The value, ex: "Banana:Yellow", "Apple:Green", "Orange:Orange". 
            {1} = Value without optional, ex "Banana", "Apple", "Orange". 
            {2} = Optional, ex: "Yellow", "Green", "Orange". 
            Second argument is the title formatting: 
            {0} = The value, ex: "Banana:Yellow", "Apple:Green", "Orange:Orange". 
            {1} = Value without optional, ex "Banana", "Apple", "Orange". 
            {2} = Optional, ex: "Yellow", "Green", "Orange". 
            {3} = The text (after formatting). 
            Third argument is the click to copy formatting: 
            {0} = The value, ex: "Banana:Yellow", "Apple:Green", "Orange:Orange". 
            {1} = Value without optional, ex "Banana", "Apple", "Orange". 
            {2} = Optional, ex: "Yellow", "Green", "Orange". 
            {3} = The text (after formatting). 
            {4} = The title (after formatting). 
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.PerRowFormat">
            <summary>
            The type and format is found in the next column instead of in the header
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.ByteSize">
            <summary>
            Format the value using bytes, kb, Mb and so on
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.ByteSpeed">
            <summary>
            Format the value using bytes/s, kb/s, Mb/s and so on
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Toggle">
            <summary>
            Add a boolean toggle button.
            First argument is the true text.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            Second argument is the false text.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            Third argument is the true title.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            Fourth argument is the false title.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            Fifth argument is the toggle api call.
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Actions">
            <summary>
            Action buttons.
            Each argument is a button, the button is a string with the following format:
            text|title|getUri|icon
            {0} is the current value.
            {1} is the next value.
            Optionally {2} to {x} is populated from the value if it's a comma separated string.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Img">
            <summary>
            First argument is the string format of the image source url where: 
            {0} = This value. 
            {1} = Next value (must exist). 
            Second argument is the string format of the url where: 
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The image source url (after formatting). 
            Third argument is the string format of the title where: 
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The image source url (after formatting). 
            {3} = The url (after formatting). 
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Duration">
            <summary>
            Format as duration.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Json">
            <summary>
            Format as json, only the first line (or max length) in shown.
            Full text on hover (and click).
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.Text">
            <summary>
            Format as multiline text, only the first line (or max length) in shown.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataFormats.MD">
            <summary>
            Format as multiline mark down, only the first line (or max length) in shown.
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataHideAttribute">
            <summary>
            Put on a member to tell any renderer to hide the column
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataIgnoreAttribute">
            <summary>
            Put on a member to ignore it when using the type in a data table
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataImgAttribute">
            <summary>
            Format valus as:
            A clickable image link.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataImgAttribute.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            A clickable image.
            </summary>
            <param name="imgUrlFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            Image alignment can (optionally) be controlled by prefixing (the evaluated) url with:
            '-' for left alignment.
            '*' for center alignment (default).
            '+' for right alignment.
            </param>
            <param name="urlFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The image url (after formatting). 
            The target for the link can (optionally) be controlled by prefixing (the evaluated) url with:
            '+' open in a new tab: "_blank" (default).
            '*' open in same frame: "_self".
            '^' open in same window: "_top".
            '-' open in parent frame: "_parent".
            </param>
            <param name="titleFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The image url (after formatting). 
            {3} = The url (after formatting). 
            </param>
            <param name="maxWidth">If greater than 0, set the max-width property</param>
            <param name="maxHeight">If greater than 0, set the max-height property</param>
        </member>
        <member name="M:SysWeaver.Data.TableDataUserIconAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            A clickable image.
            </summary>
            <param name="root">Path used to get back to site root</param>
            <param name="imageSize">
            {0} = This value. 
            {1} = Next value (must exist). 
            Image alignment can (optionally) be controlled by prefixing (the evaluated) url with:
            '-' for left alignment.
            '*' for center alignment (default).
            '+' for right alignment.
            </param>
            <param name="urlFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The image url (after formatting). 
            The target for the link can (optionally) be controlled by prefixing (the evaluated) url with:
            '+' open in a new tab: "_blank" (default).
            '*' open in same frame: "_self".
            '^' open in same window: "_top".
            '-' open in parent frame: "_parent".
            </param>
            <param name="titleFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The image url (after formatting). 
            {3} = The url (after formatting). 
            </param>
            <param name="maxWidth">If greater than 0, set the max-width property</param>
            <param name="maxHeight">If greater than 0, set the max-height property</param>
        </member>
        <member name="T:SysWeaver.Data.TableDataNameAttribute">
            <summary>
            Put on a member to tell any renderer to use this as the name instead of the member name
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataNameAttribute.#ctor(System.String)">
            <summary>
            Put on a member to tell any renderer to use this as the name instead of the member name
            </summary>
            <param name="name">The name to use for this column</param>
        </member>
        <member name="T:SysWeaver.Data.TableDataNoSortAttribute">
            <summary>
            Put on a member to disable sorting it when using the type in a data table
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataNumberAttribute">
            <summary>
            Format valus as:
            Format as a decimal number.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataNumberAttribute.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Format as a decimal number.
            </summary>
            <param name="decimals">
            The number of decimals to display.
            If less than zero, integer number will have zero decimals and floating point values will have -decimals decimal values. 
            For example if decimals=-2, value=42, results will be:
            For an Int32: "42". 
            For a Single: "42.00".
            </param>
            <param name="textFormat">
            {0} = Formatted value.
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            </param>
            <param name="titleFormat">
            {0} = Formatted value (decimals and thousands separator applied)
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            {3} = The text (after formatting). 
            </param>
            <param name="copyOnClick">Copy the value to the clipboard on click.</param>
        </member>
        <member name="F:SysWeaver.Data.TableDataNumberAttribute.Percentage">
            <summary>
            Predefined percentage attribute (2 decimals for floating point types)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataNumberAttribute.Multiplier">
            <summary>
            Predefined multiplier attribute (2 decimals for floating point types)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataPrimaryKeyAttribute">
            <summary>
            Use this attribute to mark a data table "column" as the primary key (used by default when creating a graph from a column)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataKeyAttribute">
            <summary>
            Use this attribute to mark a data table "column" as potential key (optionally used by default when creating a graph from a column)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataAmountUSDAttribute">
            <summary>
            Format valus as an amount in USD dollars.
            Ex: "$ 22.50"
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataAmountUSDAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Format valus as an amount in USD dollars.
            Ex: "$ 22.50"
            </summary>
            <param name="titleFormat">
            {0} = Formatted value (decimals and thousands separator applied)
            {1} = Next value (must exist). 
            {2} = Value before formatting.
            {3} = The text (after formatting). 
            </param>
            <param name="copyOnClick">Copy the value to the clipboard on click.</param>
        </member>
        <member name="T:SysWeaver.Data.TableDataPerRowFormatAttribute">
            <summary>
            The formatting and type is determined in the next column.
            The format of the next cell must be a text in the "TypeName|Format".
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataRawFormatAttribute">
            <summary>
            Format hint
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataSortAndFilterRequest">
            <summary>
            Used when requesting data as a data table
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataSortAndFilterRequest.Filters">
            <summary>
            Column filtering
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataSortAndFilterRequest.Order">
            <summary>
            Column names, first entry is the primary order, prefix with a '-' for descending order, ex:
            ["Name"]
            ["-Size"]
            ["Ext", "Name"]
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataOrderRequest">
            <summary>
            Used when requesting data as a data table
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataOrderRequest.Row">
            <summary>
            The first row to return (zero based index).
            Example (page with 20 items, stepping max 3 pages forward at a time):
                Request:
                    Row = 20
                    MaxRowCount = 20
                    LookAhead = 20 * 3 + 1
                Response:
                    RowCount = 35 => There are 35 rows total, 15 rows will be returned for page 2 and no more pages exist.
                    RowCount = 50 => There are 50 rows total, 20 rows will be returned for page 2 and a page 3 exists.
                    RowCount = 90 => There are 90 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 100 => There are 100 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 101 => There are at least 101 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5, 6 exists and maybe more pages.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataOrderRequest.MaxRowCount">
            <summary>
            The maximum number of rows to return.
            0 = All rows.
            Example (page with 20 items, stepping max 3 pages forward at a time):
                Request:
                    Row = 20
                    MaxRowCount = 20
                    LookAhead = 20 * 3 + 1
                Response:
                    RowCount = 35 => There are 35 rows total, 15 rows will be returned for page 2 and no more pages exist.
                    RowCount = 50 => There are 50 rows total, 20 rows will be returned for page 2 and a page 3 exists.
                    RowCount = 90 => There are 90 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 100 => There are 100 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 101 => There are at least 101 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5, 6 exists and maybe more pages.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataOrderRequest.LookAheadCount">
            <summary>
            Check availability of more rows (for paging).
            Example (page with 20 items, stepping max 3 pages forward at a time):
                Request:
                    Row = 20
                    MaxRowCount = 20
                    LookAhead = 20 * 3 + 1
                Response:
                    RowCount = 35 => There are 35 rows total, 15 rows will be returned for page 2 and no more pages exist.
                    RowCount = 50 => There are 50 rows total, 20 rows will be returned for page 2 and a page 3 exists.
                    RowCount = 90 => There are 90 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 100 => There are 100 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5 exists.
                    RowCount = 101 => There are at least 101 rows total, 20 rows will be returned for page 2 and a page 3, 4, 5, 6 exists and maybe more pages.
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataRequest">
            <summary>
            Used when requesting data as a data table
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataRequest.Cc">
            <summary>
            Change counter, if this matches the internal counter, no column information will be returned (optimization)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataRequest.Param">
            <summary>
            Extra per table type params
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataRequest.SearchIndex">
            <summary>
            The db index to use for full text search (defaults to "FullText" if none is supplied)
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataRequest.SearchText">
            <summary>
            The full text search (null or empty to do a regular table data request).
            Only available on Database mirrored tables that have a full text search index.
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataRequest.SearchNatural">
            <summary>
            If true, use natural language search instead of boolean search
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataState.Expanded">
            <summary>
            0 = None, 1 = Simple, 2 = Advanced
            </summary>
        </member>
        <member name="F:SysWeaver.Data.TableDataRow.Values">
            <summary>
            The column values
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataSortDescAttribute">
            <summary>
            Put on a member to tell sort this column in descending order by default
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataTagsAttribute">
            <summary>
            Format valus as:
            List of tags separated by a comma, ex: "Banana, Apple, Orange".
            An optional value can be present using a colon, ex: "Banana:Yellow, Apple:Green, Orange:Orange".
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataTagsAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            List of tags separated by a comma, ex: "Banana, Apple, Orange". 
            An optional value can be present using a colon, ex: "Banana:Yellow, Apple:Green, Orange:Orange".
            All '¤' characters will be replaced to ',' after splitting.
            </summary>
            <param name="textFormat">
            {0} = The value, ex: "Banana:Yellow", "Apple:Green", "Orange:Orange". 
            {1} = Value without optional, ex "Banana", "Apple", "Orange". 
            {2} = Optional, ex: "Yellow", "Green", "Orange". 
            </param>
            <param name="titleFormat">
            {0} = The value, ex: "Banana:Yellow", "Apple:Green", "Orange:Orange". 
            {1} = Value without optional, ex "Banana", "Apple", "Orange". 
            {2} = Optional, ex: "Yellow", "Green", "Orange" or text after formatting if no optional.
            {3} = The text (after formatting). 
            </param>
            <param name="copyFormat">
            {0} = The value, ex: "Banana:Yellow", "Apple:Green", "Orange:Orange". 
            {1} = Value without optional, ex "Banana", "Apple", "Orange". 
            {2} = Optional, ex: "Yellow", "Green", "Orange". 
            {3} = The text (after formatting). 
            {4} = The title (after formatting). 
            </param>
            <param name="copyOnClick">Copy all tags (raw value) to the clipboard on click.</param>
        </member>
        <member name="T:SysWeaver.Data.TableDataTitleAttribute">
            <summary>
            Put on a member to set it's title, default is the member name cleaned up (removing camel casing)
            </summary>
        </member>
        <member name="T:SysWeaver.Data.TableDataUrlAttribute">
            <summary>
            Format valus as:
            A clickable link.
            </summary>
        </member>
        <member name="M:SysWeaver.Data.TableDataUrlAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            A clickable link.
            </summary>
            <param name="textFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            </param>
            <param name="urlFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The text (after formatting). 
            The target for the link can (optionally) be controlled by prefixing (the evaluated) url with:
            '+' open in a new tab: "_blank" (default).
            '*' open in same frame: "_self".
            '^' open in same window: "_top".
            '-' open in parent frame: "_parent".
            </param>
            <param name="titleFormat">
            {0} = This value. 
            {1} = Next value (must exist). 
            {2} = The text (after formatting). 
            {3} = The url (after formatting). 
            </param>
        </member>
        <member name="M:SysWeaver.DateTimeExt.First(System.DateTime,System.DateTime)">
            <summary>
            Return the time stamp that happened first, aka Min(a, b)
            </summary>
            <param name="a">First time stamp</param>
            <param name="b">Second time stamp</param>
            <returns>The first time stamp (has the lowest value)</returns>
        </member>
        <member name="M:SysWeaver.DateTimeExt.Last(System.DateTime,System.DateTime)">
            <summary>
            Return the time stamp that happened last, aka Max(a, b)
            </summary>
            <param name="a">First time stamp</param>
            <param name="b">Second time stamp</param>
            <returns>The last time stamp (has the highest value)</returns>
        </member>
        <member name="M:SysWeaver.DateTimeExt.AsKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Return a new DateTime with a specific kind 
            </summary>
            <param name="t"></param>
            <param name="kind">New kind</param>
            <returns>New DateTime with the specific kind</returns>
        </member>
        <member name="M:SysWeaver.DateTimeExt.ChangeTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return a new DateTime with a specific time set
            </summary>
            <param name="t"></param>
            <param name="hour">[0, 24) New hour</param>
            <param name="minute">[0, 60) New minute</param>
            <param name="second">[0, 60) New second</param>
            <param name="millisecond">[0, 1000) New millisecond</param>
            <param name="microsecond">[0, 1000) New microsecond</param>
            <returns>New DateTime with the specific time set</returns>
        </member>
        <member name="M:SysWeaver.DateTimeExt.ChangeDay(System.DateTime,System.Int32)">
            <summary>
            Return a new DateTime with a specific day of month
            </summary>
            <param name="t"></param>
            <param name="newDay">[1, 31) New day of month</param>
            <returns>New DateTime with the day of month</returns>
        </member>
        <member name="M:SysWeaver.DateTimeExt.ChangeMonth(System.DateTime,System.Int32)">
            <summary>
            Return a new DateTime with a specific month of the year
            </summary>
            <param name="t"></param>
            <param name="newMonth">[1, 12) New month of the year</param>
            <returns>New DateTime with the month of the year</returns>
        </member>
        <member name="M:SysWeaver.DateTimeExt.GetIso8601WeekOfYear(System.DateTime)">
            <summary>
            Get the ISO 8601 week of a given date
            </summary>
            <param name="time">The timestamp</param>
            <returns>[1, 53] week number</returns>
        </member>
        <member name="T:SysWeaver.DebugMessageHandler">
            <summary>
            Message handler that output's messages to the console
            </summary>
        </member>
        <member name="M:SysWeaver.DebugMessageHandler.GetAsync(SysWeaver.Message.TextStyles)">
            <summary>
            Get a debug log handler that isn't blocking the calling thread while outputting (this improved performance but "debugging" using logging is harder)
            </summary>
            <param name="style">The display style to use</param>
            <returns>A message handler</returns>
        </member>
        <member name="M:SysWeaver.DebugMessageHandler.GetSync(SysWeaver.Message.TextStyles)">
            <summary>
            Get a debug log handler that is blocking the calling thread while outputting (this makes it better for "debugging" but may slow down)
            </summary>
            <param name="style">The display style to use</param>
            <returns>A message handler</returns>
        </member>
        <member name="T:SysWeaver.EditAllowNullAttribute">
            <summary>
            Put this attribute on a member to allow it to be null (for class types)
            </summary>
        </member>
        <member name="M:SysWeaver.EditAllowNullAttribute.#ctor(System.Boolean)">
            <summary>
            Put this attribute on a member to allow it to be null (for class types)
            </summary>
            <param name="allowNull">True to allow it to be null</param>
        </member>
        <member name="T:SysWeaver.EditDefaultAttribute">
            <summary>
            Put this to specify the default value to use when editing
            </summary>
        </member>
        <member name="M:SysWeaver.EditDefaultAttribute.#ctor(System.Object)">
            <summary>
            Put this to specify the default value to use when editing
            </summary>
            <param name="def">The default value, must be convertable</param>
        </member>
        <member name="T:SysWeaver.EditDisplayNameAttribute">
            <summary>
            Put this to specify the display name to use for editing
            </summary>
        </member>
        <member name="M:SysWeaver.EditDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Put this to specify the display name to use for editing
            </summary>
            <param name="name">The name to show as a display name</param>
        </member>
        <member name="T:SysWeaver.EditElementAttributesAttribute">
            <summary>
            Put this to specify the type that contain attributes for the collection element
            </summary>
        </member>
        <member name="M:SysWeaver.EditElementAttributesAttribute.#ctor(System.Type)">
            <summary>
            Put this to specify the type that contain attributes for the collection element
            </summary>
            <param name="t">The name of the type that contain the attributes for the collection element</param>
        </member>
        <member name="T:SysWeaver.EditKeyAttributesAttribute">
            <summary>
            Put this to specify the type that contain attributes for the collection key
            </summary>
        </member>
        <member name="M:SysWeaver.EditKeyAttributesAttribute.#ctor(System.Type)">
            <summary>
            Put this to specify the type that contain attributes for the collection key
            </summary>
            <param name="t">The name of the type that contain the attributes for the collection key</param>
        </member>
        <member name="T:SysWeaver.EditMaxAttribute">
            <summary>
            Put this to specify the maximum allowed value, if it's a string this is the maximum number of chars
            </summary>
        </member>
        <member name="M:SysWeaver.EditMaxAttribute.#ctor(System.Object)">
            <summary>
            Put this to specify the maximum allowed value, if it's a string this is the maximum number of chars
            </summary>
            <param name="maxValue">The maximum allow value, inclusive</param>
        </member>
        <member name="T:SysWeaver.EditMinAttribute">
            <summary>
            Put this to specify the minimum allowed value, if it's a string this is the minimum number of chars
            </summary>
        </member>
        <member name="M:SysWeaver.EditMinAttribute.#ctor(System.Object)">
            <summary>
            Put this to specify the minimum allowed value, if it's a string this is the minimum number of chars
            </summary>
            <param name="minValue">The minimum allow value, inclusive</param>
        </member>
        <member name="T:SysWeaver.EditDateUnspecifiedAttribute">
            <summary>
            Put this on a DateTime or DateOnly property to indicate that the date part is edited as unspecified
            </summary>
        </member>
        <member name="T:SysWeaver.EditMultilineAttribute">
            <summary>
            Put this to specify the default value to use when editing
            </summary>
        </member>
        <member name="M:SysWeaver.EditMultilineAttribute.#ctor(System.Boolean)">
            <summary>
            Put this to specify the default value to use when editing
            </summary>
            <param name="allowMultipleLines">True to allow for multi line </param>
        </member>
        <member name="T:SysWeaver.EditOrderAttribute">
            <summary>
            Can be used to adjust member order
            </summary>
        </member>
        <member name="M:SysWeaver.EditOrderAttribute.#ctor(System.Single)">
            <summary>
            Can be used to adjust member order
            </summary>
            <param name="order">The sort order (low to high)</param>
        </member>
        <member name="T:SysWeaver.EditPasswordAttribute">
            <summary>
            Put this to specify the value input should be masked (password)
            </summary>
        </member>
        <member name="M:SysWeaver.EditPasswordAttribute.#ctor(System.Boolean)">
            <summary>
            Put this to specify the value input should be masked (password)
            </summary>
            <param name="isPassword">True to allow for multi line</param>
        </member>
        <member name="T:SysWeaver.EditHideAttribute">
            <summary>
            Put this to specify the value should be hidden
            </summary>
        </member>
        <member name="M:SysWeaver.EditHideAttribute.#ctor(System.Boolean)">
            <summary>
            Put this to specify the value should be hidden
            </summary>
            <param name="hide">True to hide this member</param>
        </member>
        <member name="T:SysWeaver.EditReadOnlyAttribute">
            <summary>
            Put this to specify the value should be read only
            </summary>
        </member>
        <member name="M:SysWeaver.EditReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            Put this to specify the value should be read only
            </summary>
            <param name="readOnly">True to make this member read only</param>
        </member>
        <member name="T:SysWeaver.EditRangeAttribute">
            <summary>
            Put this to specify the allowed value range, if it's a string this is the range of the number of chars
            </summary>
        </member>
        <member name="M:SysWeaver.EditRangeAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Put this to specify the allowed value range, if it's a string this is the range of the number of chars
            </summary>
            <param name="minValue">The minimum allow value, inclusive</param>
            <param name="maxValue">The maximum allow value, inclusive</param>
        </member>
        <member name="T:SysWeaver.EditSliderAttribute">
            <summary>
            Put this to on a value field or property to use a slider (required a min and max)
            </summary>
        </member>
        <member name="M:SysWeaver.EditSliderAttribute.#ctor(System.Boolean)">
            <summary>
            Put this to on a value field or property to use a slider (required a min and max)
            </summary>
            <param name="useSlider">True to use a slider</param>
        </member>
        <member name="T:SysWeaver.EditTypeAttribute">
            <summary>
            Put this to specify an editor type 
            </summary>
        </member>
        <member name="M:SysWeaver.EditTypeAttribute.#ctor(System.String)">
            <summary>
            Put this to specify an editor type 
            </summary>
            <param name="type">The item type</param>
        </member>
        <member name="M:SysWeaver.EditHideIfAttribute.#ctor(System.String,SysWeaver.EditHideOps,System.Object)">
            <summary>
            Hide this member if the condition specificed is true
            </summary>
            <param name="memberName">The member to check against</param>
            <param name="op">The operation to perform</param>
            <param name="value">The value to compare with</param>
        </member>
        <member name="M:SysWeaver.EditHideIfAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Hide this member if another member is trueful of false 
            </summary>
            <param name="memberName">The member to check against</param>
            <param name="isTrue">If true, and the member is trueful then hide</param>
        </member>
        <member name="M:SysWeaver.EditHideIfAttribute.#ctor(System.String)">
            <summary>
            Hide this member if an expression evaluates to true
            </summary>
            <param name="expression">The javascript expression to evaluate.\nYou can use "this" to access other members, ex:\n"this.SomeValue.toLowerCase()==='xyz'" </param>
        </member>
        <member name="T:SysWeaver.EditTypes">
            <summary>
            Some predefined editor types
            </summary>
        </member>
        <member name="F:SysWeaver.EditTypes.Language">
            <summary>
            Editor for language select
            </summary>
        </member>
        <member name="F:SysWeaver.EditTypes.Country">
            <summary>
            Editor for country select
            </summary>
        </member>
        <member name="F:SysWeaver.EditTypes.Currency">
            <summary>
            Editor for currency select
            </summary>
        </member>
        <member name="F:SysWeaver.EditTypes.Email">
            <summary>
            Editor for email validation
            </summary>
        </member>
        <member name="F:SysWeaver.EditTypes.Inline">
            <summary>
            Valid on objects, makes the object show inlined
            </summary>
        </member>
        <member name="T:SysWeaver.EndianAwareBinaryReader">
            <summary>
            Contains method that create BinareReader's with specific endianness requirements.
            </summary>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.OpenLittleEndian(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a BinaryReader that reads data stored in little endian
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data stored as little endian</returns>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.OpenLittleEndian(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a BinaryReader that reads data stored in little endian
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="encoding">The text encoding of the stream</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data stored as little endian</returns>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.OpenBigEndian(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a BinaryReader that reads data stored in big endian
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data stored as big endian</returns>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.OpenBigEndian(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a BinaryReader that reads data stored in big endian
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="encoding">The text encoding of the stream</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data stored as big endian</returns>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a BinaryReader that reads data using the current endian (of the current process)
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data stored using the current endian (of the current process)</returns>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.Open(System.IO.Stream,SysWeaver.Endianess,System.Boolean)">
            <summary>
            Creates a BinaryReader that reads data using the current endian (of the current process)
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="endian">What endian to read data in</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data stored using the current endian (of the current process)</returns>
        </member>
        <member name="M:SysWeaver.EndianAwareBinaryReader.Open(System.IO.Stream,SysWeaver.Endianess,System.Text.Encoding,System.Boolean)">
            <summary>
            Create a BinaryReader that reads data using the specified endianness
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="endian">The desired endianness</param>
            <param name="encoding">The text encoding of the stream</param>
            <param name="leaveOpen">Optionally leave the <paramref name="stream"/> open when the binary reader is disposed</param>
            <returns>A binary reader that reads data using the specified endianness</returns>
        </member>
        <member name="T:SysWeaver.Endianess">
            <summary>
            Repesents an endianness
            </summary>
        </member>
        <member name="F:SysWeaver.Endianess.Current">
            <summary>
            Use current endianness
            </summary>
        </member>
        <member name="F:SysWeaver.Endianess.Little">
            <summary>
            Use little endianness
            </summary>
        </member>
        <member name="F:SysWeaver.Endianess.Big">
            <summary>
            Use big endianness
            </summary>
        </member>
        <member name="M:SysWeaver.EnumerableExt.MinMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Find the min and max value in a sequence
            </summary>
            <typeparam name="T">The enumerable type</typeparam>
            <typeparam name="E">The element type (value to extract from T)</typeparam>
            <param name="enumerable">The sequence to enumerate</param>
            <param name="predicate">A function to extract a value from an element in the sequence</param>
            <param name="comparer">An optional comaprer to use</param>
            <returns>The min and max value found, if sequence is empty, two default(E) is returned</returns>
        </member>
        <member name="M:SysWeaver.EnumerableExt.MinMax``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Find the min and max value in a sequence
            </summary>
            <typeparam name="T">The enumerable type</typeparam>
            <param name="enumerable">The sequence to enumerate</param>
            <param name="comparer">An optional comaprer to use</param>
            <returns>The min and max value found, if sequence is empty, two default(T) is returned</returns>
        </member>
        <member name="M:SysWeaver.EnumerableExt.ToConcurrentDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a concurrent dictionary from some values.
            Will not throw on duplicate keys, rather the last value will be used.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <param name="enumerable"></param>
            <param name="keyExtractor">A function that extract / creates the key for the given value</param>
            <param name="comparer">Optional comparer</param>
            <returns>A concurrent dictionary with the values</returns>
        </member>
        <member name="M:SysWeaver.EnumerableExt.AsEnumerable``1(``0)">
            <summary>
            Return a single value as an enumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value to return as an IEnumerable</param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.EnvInfo">
            <summary>
            Additional information about the runtime environment
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.HaveConsole">
            <summary>
            True if the process is running with a console window
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.ProcessorArchitecture">
            <summary>
            The processor architecture:
            "x86"
            "x64"
            "arm"
            "arm64"
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.OsPlatform">
            <summary>
            The operative system platform:
            "freebsd"
            "linux"
            "osx"
            "windows"
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.HostExecutable">
            <summary>
            Full path to the actual executable
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.ExecCommand">
            <summary>
            The executable command ("host.exe" file or "host.exe asm.dll")
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.CommandLine">
            <summary>
            The command line (including host)
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.Executable">
            <summary>
            Full path to the executable
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.ExecutableDir">
            <summary>
            Full path to the folder where the application is
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.ExecutableBase">
            <summary>
            Full path to the executable without the extension (append for log's etc)
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.NativePath">
            <summary>
            The "folder" to use when loading native dependencies.
            ExecutableBase + "\runtimes\" + OsPlatform + "_" + ProcessorArchitecture.
            Ex:
            "D:\MyApp\runtimes\linux_x64"
            "D:\MyApp\runtimes\windows_arm64"
            </summary>
        </member>
        <member name="P:SysWeaver.EnvInfo.AppName">
            <summary>
            Application name
            </summary>
        </member>
        <member name="P:SysWeaver.EnvInfo.AppDisplayName">
            <summary>
            Application display name
            </summary>
        </member>
        <member name="P:SysWeaver.EnvInfo.AppDescription">
            <summary>
            Application description
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.AppStart">
            <summary>
            Application start time
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.Cc">
            <summary>
            Application CC tick
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.AppInstance">
            <summary>
            "Unique" instance id as a string
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.AppAssemblyName">
            <summary>
            Assembly name, should stay the same independent of filename
            </summary>
        </member>
        <member name="F:SysWeaver.EnvInfo.AppGuid">
            <summary>
            A guid (as a string), based on AppAssemblyName
            </summary>
        </member>
        <member name="P:SysWeaver.EnvInfo.TextVars">
            <summary>
            Contains text variables, ex:
                        "AppName" = Application name.
                        "AppDisplayName" = Application display name.
                        "AppDescription" = Application description name.
                        "AppStart" = Application start time as "yyyy-MM-hh hh:mm:ss".
                        "AppAssemblyName" = Application assembly name (typically the exe name), "ExchangeRateService".
                        "AppGuid" = A unique guid for this appllication, ex: "{CFBEDD92-341E-4EDB-96EB-C8305974EE29}".
                        "UserName" = The environment user name, ex: "John Doe".
                        "Is64BitProcess" = "True" if the process is running as a 64-bit process, else "False"
                        "OSVersion" = The version of the OS
                        "Platform" = The platform, ex "WinNT", "Unix".
            </summary>
        </member>
        <member name="P:SysWeaver.EnvInfo.TextVarsCaseInsensitive">
            <summary>
            Contains text variables in a case insensitive dictionary where all keys are lowercased, ex:
                        "appname" = Application name.
                        "appdisplayname" = Application display name.
                        "appdescription" = Application description name.
                        "appstart" = Application start time as "yyyy-MM-hh hh:mm:ss".
                        "appassemblyname" = Application assembly name (typically the exe name), "ExchangeRateService".
                        "appguid" = A unique guid for this appllication, ex: "{CFBEDD92-341E-4EDB-96EB-C8305974EE29}".
                        "username" = The environment user name, ex: "John Doe".
                        "is64bitprocess" = "True" if the process is running as a 64-bit process, else "False"
                        "osversion" = The version of the OS
                        "platform" = The platform, ex "WinNT", "Unix".
            </summary>
        </member>
        <member name="M:SysWeaver.EnvInfo.ResolveText(System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Resolve a text template that may contain env info variables, ex: "$(AppName)".
                        $(AppName) = Application name.
                        $(AppDisplayName) = Application display name.
                        $(AppDescription) = Application description name.
                        $(AppStart) = Application start time as "yyyy-MM-hh hh:mm:ss".
                        $(AppAssemblyName) = Application assembly name (typically the exe name), "ExchangeRateService".
                        $(AppGuid) = A unique guid for this appllication, ex: "{CFBEDD92-341E-4EDB-96EB-C8305974EE29}".
                        $(UserName) = The environment user name, ex: "John Doe".
                        $(Is64BitProcess) = "True" if the process is running as a 64-bit process, else "False".
                        $(OSVersion) = The version of the OS.
                        $(Platform) = The platform, ex "WinNT", "Unix".
            </summary>
            <param name="template">The template, variables start with "$(" and ends with ")".
                        $(AppName) = Application name.
                        $(AppDisplayName) = Application display name.
                        $(AppDescription) = Application description name.
                        $(AppStart) = Application start time as "yyyy-MM-hh hh:mm:ss".
                        $(AppAssemblyName) = Application assembly name (typically the exe name), "ExchangeRateService".
                        $(AppGuid) = A unique guid for this appllication, ex: "{CFBEDD92-341E-4EDB-96EB-C8305974EE29}".
                        $(UserName) = The environment user name, ex: "John Doe".
                        $(Is64BitProcess) = "True" if the process is running as a 64-bit process, else "False".
                        $(OSVersion) = The version of the OS.
                        $(Platform) = The platform, ex "WinNT", "Unix".
            </param>
            <param name="caseInSensitive">If true the variable names is case in-sensitive</param>
            <param name="extra">Optional extra variables</param>
            <returns>The resolved text</returns>
        </member>
        <member name="M:SysWeaver.EnvInfo.MakeAbsoulte(System.String,System.Boolean)">
            <summary>
            Make an absolute path from a relative path (not using current directory, but rather the executable directory).
            If the path already is absolute, nothing will be changed.
            </summary>
            <param name="path">Relative or absolue path</param>
            <param name="useCurrentDir">Make relative to the current path instead of the executable path</param>
            <returns>An absolute path</returns>
        </member>
        <member name="P:SysWeaver.EnvInfo.AppSeed">
            <summary>
            Seed to use for generating data (app specific)
            </summary>
        </member>
        <member name="P:SysWeaver.EnvInfo.AppLanguage">
            <summary>
            The default language to use, system should try to localize according to this.
            The two letter ISO 639-1 language code of the language, ex: "en", "es", "de".
            Can optionally have an ISO 3166 Alpha 2 country code appended, ex: "en-GB", "en-US", "es-MX", "es-ES".
            </summary>
        </member>
        <member name="F:SysWeaver.AppInfoParams.AppName">
            <summary>
            The name of the application (can be used for file names etc)
            </summary>
        </member>
        <member name="F:SysWeaver.AppInfoParams.AppDisplayName">
            <summary>
            The display name of the application (can be used for texts etc, displayed to end users)
            </summary>
        </member>
        <member name="F:SysWeaver.AppInfoParams.AppDescription">
            <summary>
            The description of the application
            </summary>
        </member>
        <member name="F:SysWeaver.AppInfoParams.AppSeed">
            <summary>
            A seed (changes the automatically generated logo)
            </summary>
        </member>
        <member name="F:SysWeaver.AppInfoParams.AppLanguage">
            <summary>
            The default language to use, system should try to localize according to this.
            The two letter ISO 639-1 language code of the language, ex: "en", "es", "de".
            Can optionally have an ISO 3166 Alpha 2 country code appended, ex: "en-GB", "en-US", "es-MX", "es-ES".
            </summary>
        </member>
        <member name="T:SysWeaver.AppInfo">
            <summary>
            Service used to change the application information such as display name etc
            </summary>
        </member>
        <member name="T:SysWeaver.ExceptionTracker">
            <summary>
            Class that can be used to track failures
            </summary>
        </member>
        <member name="M:SysWeaver.ExceptionTracker.OnException(System.Exception)">
            <summary>
            Call once on an exception
            </summary>
            <param name="ex">The exception that cause the failure</param>
        </member>
        <member name="P:SysWeaver.ExceptionTracker.LastTime">
            <summary>
            The time stamp (in ticks) when the last fail happened, use new DateTime(ticks, DateTimeKind.Utc) to get a DateTime time
            </summary>
        </member>
        <member name="P:SysWeaver.ExceptionTracker.Count">
            <summary>
            Number of times an exception have been registered
            </summary>
        </member>
        <member name="P:SysWeaver.ExceptionTracker.LastException">
            <summary>
            The last exception registered
            </summary>
        </member>
        <member name="M:SysWeaver.ExternalProcess.Run(System.String,System.String,System.Action{System.String,System.Boolean},System.Action{System.Int32,System.Exception,System.TimeSpan,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Run an external command
            </summary>
            <param name="cmd">The command to run</param>
            <param name="args">Optional command arguments</param>
            <param name="onMessage">Optionally called on every line outputted, second parameter is false for stdout and true for stderr</param>
            <param name="onExit">Optionally called when the process completed or on error, paramaters are: exitCode, exception, duration and the last X stdout/stderr lines of output</param>
            <returns>The process exit code</returns>
        </member>
        <member name="T:SysWeaver.FastByteArrayEqualityComparer">
            <summary>
            A fast equality comparer for byte array's that can be used if all these conditions are met:
            * Arrays may not be null.
            * Arrays must be at least 4 bytes in length.
            </summary>
        </member>
        <member name="F:SysWeaver.FastByteArrayEqualityComparer.Instance">
            <summary>
            A fast equality comparer for byte array's that can be used if all these conditions are met:
            * Arrays may not be null.
            * Arrays must be at least 4 bytes in length.
            </summary>
        </member>
        <member name="T:SysWeaver.FastMemCache`2">
            <summary>
            Implements a cache that removes it's items after the specified duration (after last request)
            </summary>
            <typeparam name="K">The type of the key</typeparam>
            <typeparam name="V">The type of the value</typeparam>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.#ctor(System.TimeSpan,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a cache that removes it's items after the specified duration (after last request)
            </summary>
            <param name="timeout">The duration to keep items in the cache (after last request)</param>
            <param name="comparer">An optional comparer</param>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdate(`0,System.Func{`0,`1})">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.TryGet(`0,`1@)">
            <summary>
            Get an item if it's cached
            </summary>
            <param name="key">Tke key</param>
            <param name="value">The cached value or default it it deosn't exist</param>
            <returns>True if a value exist</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdate``1(`0,System.Func{`0,``0,`1},``0)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="arg">A custom argument that is passed to the delegate if invoked</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdate``2(`0,System.Func{`0,``0,``1,`1},``0,``1)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="arg0">A custom argument that is passed to the delegate if invoked</param>
            <param name="arg1">A custom argument that is passed to the delegate if invoked</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdateAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}},System.Boolean)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="waitUntilReady">If the item have to be updated, wait for the update before returning, else the default value will be returned and the update will be started concurrently</param>
            <returns>The value of the item or default if wait until ready is false and the update haven't completed yet</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdateAsync``1(`0,System.Func{`0,``0,System.Threading.Tasks.Task{`1}},``0,System.Boolean)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="arg">A custom argument that is passed to the delegate if invoked</param>
            <param name="waitUntilReady">If the item have to be updated, wait for the update before returning, else the default value will be returned and the update will be started concurrently</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdateAsync``2(`0,System.Func{`0,``0,``1,System.Threading.Tasks.Task{`1}},``0,``1,System.Boolean)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="arg0">A custom argument that is passed to the delegate if invoked</param>
            <param name="arg1">A custom argument that is passed to the delegate if invoked</param>
            <param name="waitUntilReady">If the item have to be updated, wait for the update before returning, else the default value will be returned and the update will be started concurrently</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdateValueAsync(`0,System.Func{`0,System.Threading.Tasks.ValueTask{`1}},System.Boolean)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="waitUntilReady">If the item have to be updated, wait for the update before returning, else the default value will be returned and the update will be started concurrently</param>
            <returns>The value of the item or default if wait until ready is false and the update haven't completed yet</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdateValueAsync``1(`0,System.Func{`0,``0,System.Threading.Tasks.ValueTask{`1}},``0,System.Boolean)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="arg">A custom argument that is passed to the delegate if invoked</param>
            <param name="waitUntilReady">If the item have to be updated, wait for the update before returning, else the default value will be returned and the update will be started concurrently</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetOrUpdateValueAsync``2(`0,System.Func{`0,``0,``1,System.Threading.Tasks.ValueTask{`1}},``0,``1,System.Boolean)">
            <summary>
            Get an item from the cache, if it doesn't exist in the cache, the supplied delegate is executed to create the item.
            Only one item can be created at the same time (locked using the key), so no risk for "double" effort. 
            </summary>
            <param name="key">Tke key</param>
            <param name="func">The delegate used to create a non-existing item</param>
            <param name="arg0">A custom argument that is passed to the delegate if invoked</param>
            <param name="arg1">A custom argument that is passed to the delegate if invoked</param>
            <param name="waitUntilReady">If the item have to be updated, wait for the update before returning, else the default value will be returned and the update will be started concurrently</param>
            <returns>The value of the item</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.Prune">
            <summary>
            Call to manually prune (remove) old items, no real need to call this unless memory usage is the primary concern
            </summary>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.Remove(`0)">
            <summary>
            Remove an entry from the cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.Clear">
            <summary>
            Clear cached values
            </summary>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetStats(System.String,System.String)">
            <summary>
            Get some stats for the cache using Stats type
            </summary>
            <param name="system">A system name for the cache</param>
            <param name="prefix">An optional prefix to add to the stats name</param>
            <returns>Stats</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetStats(System.Double@,System.Double@,System.Double@,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Get some stats about the cache performance
            </summary>
            <param name="hitRatio">The ratio [0, 1] of cache hits (GetOrUpdate returns an existing item)</param>
            <param name="semiHitRatio">The ratio [0, 1] of semi cache hits (GetOrUpdate returns an existing item, but had to take a lock to get it, so less optimal)</param>
            <param name="missRatio">The ratio [0, 1] of cache misses (GetOrUpdate doesn't have an item, and a new one have to be created)</param>
            <param name="hitCount">Number of cache hits (GetOrUpdate returns an existing item)</param>
            <param name="semiHitCount">Number of semi cache hits (GetOrUpdate returns an existing item, but had to take a lock to get it, so less optimal)</param>
            <param name="missCount">Number of cache misses (GetOrUpdate doesn't have an item, and a new one have to be created)</param>
            <param name="size">Number of items in the cache</param>
            <returns>The total number of GetOrUpdate requests</returns>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetStats(System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Get some stats about the cache performance
            </summary>
            <param name="hitCount">Number of cache hits (GetOrUpdate returns an existing item)</param>
            <param name="semiHitCount">Number of semi cache hits (GetOrUpdate returns an existing item, but had to take a lock to get it, so less optimal)</param>
            <param name="missCount">Number of cache misses (GetOrUpdate doesn't have an item, and a new one have to be created)</param>
            <param name="size">Number of items in the cache</param>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.ResetStats">
            <summary>
            Reset all stats counters
            </summary>
        </member>
        <member name="M:SysWeaver.FastMemCache`2.GetCount">
            <summary>
            Get the count of cached items (somewhat slow)
            </summary>
            <returns>Number of cached items</returns>
        </member>
        <member name="M:SysWeaver.FileExt.WriteMemory(System.String,System.ReadOnlyMemory{System.Byte},System.Boolean)">
            <summary>
            Save all memory to disc
            </summary>
            <param name="filename">The file to write to (overwites existing)</param>
            <param name="memory">The memory to save</param>
            <param name="ensureWriteTo">If true, the function doesn't return until the data have been physically written to disc (or at least it tries to)</param>
        </member>
        <member name="M:SysWeaver.FileExt.WriteToFile(System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Save all memory to disc
            </summary>
            <param name="memory">The memory to save</param>
            <param name="filename">The file to write to (overwites existing)</param>
        </member>
        <member name="M:SysWeaver.FileExt.WriteMemoryAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Boolean)">
            <summary>
            Save all memory to disc
            </summary>
            <param name="filename">The file to write to (overwites existing)</param>
            <param name="memory">The memory to save</param>
            <param name="ensureWriteTo">If true, the function doesn't return until the data have been physically written to disc (or at least it tries to)</param>
        </member>
        <member name="M:SysWeaver.FileExt.WriteToFileAsync(System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Save all memory to disc
            </summary>
            <param name="memory">The memory to save</param>
            <param name="filename">The file to write to (overwites existing)</param>
        </member>
        <member name="M:SysWeaver.FileExt.WriteSpan(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Save all span to disc
            </summary>
            <param name="filename">The file to write to (overwites existing)</param>
            <param name="span">The span to save</param>
        </member>
        <member name="M:SysWeaver.FileExt.WriteToFile(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Save all span to disc
            </summary>
            <param name="span">The span to save</param>
            <param name="filename">The file to write to (overwites existing)</param>
        </member>
        <member name="T:SysWeaver.FileHash">
            <summary>
            Computes and caches file hashes (automatic pruning).
            Folders can be overridden using the key "FileHashFolders" in the ApplicationName.Config.json file (shared with DecompressedFileHash).
            Default uses the Folders.AllSharedFolders locations.
            </summary>
        </member>
        <member name="M:SysWeaver.FileHash.FilesAreEqual(System.String,System.String)">
            <summary>
            Determines if two files have equal content.
            If one file doesn't exist, this function returns false.
            If none of the files exist, this function returns true.
            Else the file content must match (using MD5 hash and length).
            </summary>
            <param name="a">One file</param>
            <param name="b">Another file</param>
            <returns>True if the files are identical, else false</returns>
        </member>
        <member name="M:SysWeaver.FileHash.GetHash(System.String)">
            <summary>
            Get a hash of the contents of the supplied file
            </summary>
            <param name="filename">The existing file to get the hash of the content</param>
            <returns>A hash string (26 chars) or null if there is some error</returns>
        </member>
        <member name="M:SysWeaver.FileHash.GetHashAsync(System.String)">
            <summary>
            Get a hash of the contents of the supplied file
            </summary>
            <param name="filename">The existing file to get the hash of the content</param>
            <returns>A hash string (26 chars) or null if there is some error</returns>
        </member>
        <member name="M:SysWeaver.FileHash.IsWeb(System.String)">
            <summary>
            The functions used to determine if the file is a web file or a local file
            </summary>
            <param name="filename"></param>
            <returns>True if the file will be downloaded</returns>
        </member>
        <member name="M:SysWeaver.FileHash.GetCacheKey(System.String)">
            <summary>
            Given a file, compute name for meta data
            </summary>
            <param name="filename">The existing file to get the hash of the content</param>
            <returns>The key name for this file</returns>
        </member>
        <member name="M:SysWeaver.FileHash.GetCacheKeyAsync(System.String,System.Boolean)">
            <summary>
            Given a file, compute name for meta data
            </summary>
            <param name="filename">The existing file to get the hash of the content</param>
            <param name="isWeb">Set to true if the file is on the web</param>
            <returns>The key name for this file</returns>
        </member>
        <member name="M:SysWeaver.FileHash.GetCacheFolder(System.String)">
            <summary>
            Get the location of the cache folder, create one if none exist
            </summary>
        </member>
        <member name="T:SysWeaver.FileLogMessageHandler">
            <summary>
            Message handler that output's messages to the console
            </summary>
        </member>
        <member name="T:SysWeaver.Folders">
            <summary>
            Use this to get base folders for application data.
            Folders can be configured in the ApplicationName.Config.json config file, using the keys:
            - "AllFolders" for folders not specific to the running user.
            - "UserFolders" for folders specific to the running user (either use the "$(LocalApplicationData)" to use the OS users home folder, or the "$(UserName)").
            You can optionally or additionally override any of the derived folders using the keys:
            - "AllSharedFolders".
            - "AllAppFolders".
            - "UserSharedFolders".
            - "UserAppFolders".
            /// </summary>
        </member>
        <member name="F:SysWeaver.Folders.AllSharedFolders">
            <summary>
            Folders to use for shared data between all SysWeaver apps, shared for all OS users.
            </summary>
        </member>
        <member name="F:SysWeaver.Folders.AllAppFolders">
            <summary>
            Folders to use for private data for this app, shared for all OS users.
            </summary>
        </member>
        <member name="F:SysWeaver.Folders.UserSharedFolders">
            <summary>
            Folders to use for shared data between all SysWeaver apps, unique to the running user.
            </summary>
        </member>
        <member name="F:SysWeaver.Folders.UserAppFolders">
            <summary>
            Folders to use for private data for this app, unique to the running user.
            </summary>
        </member>
        <member name="M:SysWeaver.Folders.Append(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Append a path to a set of root paths
            </summary>
            <param name="roots">Root paths</param>
            <param name="paths">The path(s) to append (using Path.Combine)</param>
            <returns>Resulting paths</returns>
        </member>
        <member name="M:SysWeaver.Folders.FromConfig(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Get a set of folders from config or using defaults.
            </summary>
            <param name="keyName">The config key to use, can contains any number of folders separated by a ;, is resolved using the PathTemplate.Resolve methods so any variables can be used</param>
            <param name="defaultRoots">If the key is not in the config use these root paths</param>
            <param name="defaultPath">If the key is not in the config, append this path to the roots</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Folders.FromString(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Get a set of folders from config or using defaults.
            </summary>
            <param name="paths">The paths to use, can be null or empty to use defaults, can contains any number of folders separated by a ;, is resolved using the PathTemplate.Resolve methods so any variables can be used</param>
            <param name="defaultRoots">If the key is not in the config use these root paths</param>
            <param name="defaultPath">If the key is not in the config, append this path to the roots</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Folders.SelectFolder(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Select one folder of possible many, using hashing of a key for "balancing"
            </summary>
            <param name="folders">The folders to choose from</param>
            <param name="key">A key, like a filename for instance</param>
            <returns>The chosen folder</returns>
        </member>
        <member name="M:SysWeaver.Folders.GetBase(System.Boolean,System.Boolean)">
            <summary>
            Get the base folder based on the use case
            </summary>
            <param name="perUser">Get a unique path per user or not</param>
            <param name="perApp">Get a unique path per application</param>
            <returns>The base paths to use</returns>
        </member>
        <member name="M:SysWeaver.HashTools.GetHashString(System.String)">
            <summary>
            Get a string of length 26 for a given text string
            </summary>
            <param name="text">The 16 byte hash</param>
            <returns>The text</returns>
        </member>
        <member name="M:SysWeaver.HashTools.GetHashString16(System.ReadOnlySpan{System.Byte})">
            <summary>
            Get a string of length 26 for a given 16 byte hash
            </summary>
            <param name="hash">The 16 byte hash</param>
            <returns>A string representing the hash</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SysWeaver.HashTools.GetHashFromString26(System.String)">
            <summary>
            Get the hash as 16 bytes from a string with the hash encoded in the 26 char string format
            </summary>
            <param name="hashStringh16">A string of length 26 with an encoded hash</param>
            <returns>16 bytes with the hash</returns>
        </member>
        <member name="M:SysWeaver.HashTools.GetHashFromString26(System.Span{System.Byte},System.String)">
            <summary>
            Get the hash as 16 bytes from a string with the hash encoded in the 26 char string format
            </summary>
            <param name="hash">Destination for the hash, must be 16 bytes</param>
            <param name="hashStringh16">A string of length 26 with an encoded hash</param>
        </member>
        <member name="M:SysWeaver.HashTools.GetCompactString(System.UInt64)">
            <summary>
            Get a string of length 13 for a given 64 bit integer
            </summary>
            <param name="value">The value to encode</param>
            <returns>A string representing the value</returns>
        </member>
        <member name="M:SysWeaver.HashTools.GetCompactString(System.Int64)">
            <summary>
            Get a string of length 13 for a given 64 bit integer
            </summary>
            <param name="value">The value to encode</param>
            <returns>A string representing the value</returns>
        </member>
        <member name="M:SysWeaver.HashTools.ParseCompactUInt64(System.ReadOnlySpan{System.Char})">
            <summary>
            Read a value from a compact string
            </summary>
            <param name="compactString">The 13 char long compact string</param>
            <returns>The value encoded in the string</returns>
        </member>
        <member name="M:SysWeaver.HashTools.ParseCompactInt64(System.ReadOnlySpan{System.Char})">
            <summary>
            Read a value from a compact string
            </summary>
            <param name="compactString">The 13 char long compact string</param>
            <returns>The value encoded in the string</returns>
        </member>
        <member name="M:SysWeaver.HtmlColors.TryGetArgb(System.UInt32@,System.String)">
            <summary>
            Get an rgb value from a html color, 0xaarrggbb
            </summary>
            <param name="argColor">The color as 0xaarrggbb</param>
            <param name="htmlColor">A html color, can be a name [Red], a hex value [#f00] or [#ff0000], rgb [rgb(255,0,0)] or rgba [rgba(255,0,0,1.0)]</param>
            <returns>True if the input in understod and a hex colour value is returned</returns>
        </member>
        <member name="M:SysWeaver.HtmlColors.ParseHtmlColor(System.String,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Get the red, green, blue and alpha component of a html color
            </summary>
            <param name="htmlColor">A html color, can be a name [Red], a hex value [#f00] or [#ff0000], rgb [rgb(255,0,0)] or rgba [rgba(255,0,0,1.0)]</param>
            <param name="r">[0, 255] Red component</param>
            <param name="g">[0, 255] Green component</param>
            <param name="b">[0, 255] Blue component</param>
            <param name="a">[0, 1] Alpha component</param>
            <returns>True if the input in understod</returns>
        </member>
        <member name="M:SysWeaver.HtmlColors.GetShortest(System.String)">
            <summary>
            Get the shorted version of a given color (using names, 3 component hex or 6 component hex)
            </summary>
            <param name="htmlColor">A html color, can be a name [Red], a hex value [#f00] or [#ff0000], rgb [rgb(255,0,0)] or rgba [rgba(255,0,0,1.0)]</param>
            <returns>The shortest version of the color</returns>
        </member>
        <member name="M:SysWeaver.HtmlColors.MakeHtmlColor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Make the shortest html color string for the given red, green, blue and alpha components.
            </summary>
            <param name="r">[0, 255] Red component</param>
            <param name="g">[0, 255] Green component</param>
            <param name="b">[0, 255] Blue component</param>
            <param name="a">[0, 1] Alpha component</param>
            <returns>A html color string</returns>
        </member>
        <member name="M:SysWeaver.HtmlColors.MakeTransparent(System.String,System.Double)">
            <summary>
            Make the given color transparent
            </summary>
            <param name="htmlColor">A html color, can be a name [Red], a hex value [#f00] or [#ff0000], rgb [rgb(255,0,0)] or rgba [rgba(255,0,0,1.0)]</param>
            <param name="opacity">The opacity (multiplied with the html color opacity)</param>
            <returns>The transparent color</returns>
        </member>
        <member name="M:SysWeaver.HtmlColors.MakeTransparentLerp(System.String,System.String,System.Double)">
            <summary>
            Lerp between 2 colors
            </summary>
            <param name="htmlColorA">A html color, can be a name [Red], a hex value [#f00] or [#ff0000], rgb [rgb(255,0,0)] or rgba [rgba(255,0,0,1.0)]</param>
            <param name="htmlColorB">A html color, can be a name [Red], a hex value [#f00] or [#ff0000], rgb [rgb(255,0,0)] or rgba [rgba(255,0,0,1.0)]</param>
            <param name="distance">The distance to move from A to B</param>
            <returns>The resulting color</returns>
        </member>
        <member name="T:SysWeaver.ICloneable`1">
            <summary>
            Indicate that a class can be cloned (deep) using the Clone method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SysWeaver.ICloneable`1.Clone">
            <summary>
            Create a deep copy of the object.
            Implementations MUST handle the case where this is null (and return null)
            </summary>
            <returns>A clone of the object or null if the object has null</returns>
        </member>
        <member name="M:SysWeaver.ICloneable`1.CopyFrom(`0)">
            <summary>
            Copy data from some other instance (none may be null)
            </summary>
            <param name="other">The instance to copy data from</param>
        </member>
        <member name="T:SysWeaver.Inspection.DescVersionAttribute">
            <summary>
            Put this of a type that implements the IDescribable interface to specify a version (for version handling)
            </summary>
        </member>
        <member name="T:SysWeaver.Inspection.IDescribable">
            <summary>
            Object than can be described (save, loaded, copied etc) has to implement this interface
            Optionally a constructor (private is preferred) with the ClassName(IInspector i, int version) might have to be implemented for readonly fields.
            Version handling of the type is done by adding a type attribute DescVersionAttribute to the type
            </summary>
        </member>
        <member name="M:SysWeaver.Inspection.IDescribable.Describe(SysWeaver.Inspection.IInspector)">
            <summary>
            Describe this type to an inspector at the current version
            </summary>
            <param name="i">The inspector that should be given the description of this object</param>
        </member>
        <member name="M:SysWeaver.Inspection.IDescribable.Describe(SysWeaver.Inspection.IInspector,System.Int32)">
            <summary>
            Describe this type to an inspector at a specified version (the version of this type is less than the current version)
            </summary>
            <param name="i">The inspector that should be given the description of this object</param>
            <param name="version">The version that should be described </param>
        </member>
        <member name="T:SysWeaver.IntegerBitExt">
            <summary>
            Extensions to integer types to handle power of two scenarios
            </summary>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.IsPow2(System.UInt64)">
            <summary>
            Test if an integer value is a power of two
            </summary>
            <param name="v">The value to test</param>
            <returns>True if the value is a power of two, else false</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.NextPow2Minus1(System.UInt64)">
            <summary>
            Find the next value that is a power of two and return one minus that (aka mask)
            </summary>
            <param name="v">The value to test</param>
            <returns>A value that is the next power of two minus one</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.EnsurePow2(System.UInt64)">
            <summary>
            Make sure that a value is a power of two, else find the next greater power of two
            </summary>
            <param name="v">The value to test</param>
            <returns>A value that is the a power of two</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.IsPow2(System.UInt32)">
            <summary>
            Test if an integer value is a power of two
            </summary>
            <param name="v">The value to test</param>
            <returns>True if the value is a power of two, else false</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.NextPow2Minus1(System.UInt32)">
            <summary>
            Find the next value that is a power of two and return one minus that (aka mask)
            </summary>
            <param name="v">The value to test</param>
            <returns>A value that is the next power of two minus one</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.EnsurePow2(System.UInt32)">
            <summary>
            Make sure that a value is a power of two, else find the next greater power of two
            </summary>
            <param name="v">The value to test</param>
            <returns>A value that is the a power of two</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.IsPow2(System.Int64)">
            <summary>
            Test if an integer value is a power of two
            </summary>
            <param name="vv">The value to test</param>
            <returns>True if the value is a power of two, else false</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.NextPow2Minus1(System.Int64)">
            <summary>
            Find the next value that is a power of two and return one minus that (aka mask)
            </summary>
            <param name="vv">The value to test</param>
            <returns>A value that is the next power of two minus one</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.EnsurePow2(System.Int64)">
            <summary>
            Make sure that a value is a power of two, else find the next greater power of two
            </summary>
            <param name="vv">The value to test</param>
            <returns>A value that is the a power of two</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.IsPow2(System.Int32)">
            <summary>
            Test if an integer value is a power of two
            </summary>
            <param name="vv">The value to test</param>
            <returns>True if the value is a power of two, else false</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.NextPow2Minus1(System.Int32)">
            <summary>
            Find the next value that is a power of two and return one minus that (aka mask)
            </summary>
            <param name="vv">The value to test</param>
            <returns>A value that is the next power of two minus one</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.EnsurePow2(System.Int32)">
            <summary>
            Make sure that a value is a power of two, else find the next greater power of two
            </summary>
            <param name="vv">The value to test</param>
            <returns>A value that is the a power of two</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.AsBinary(System.UInt64,System.Int32)">
            <summary>
            Get a binary string representation of the value
            </summary>
            <param name="v">The value to get the binary string representation from</param>
            <param name="bitCount">Number of bits to show (string length)</param>
            <returns>A binary string representation of the value</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.AsBinary(System.Int64,System.Int32)">
            <summary>
            Get a binary string representation of the value
            </summary>
            <param name="v">The value to get the binary string representation from</param>
            <param name="bitCount">Number of bits to show (string length)</param>
            <returns>A binary string representation of the value</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.AsBinary(System.UInt32,System.Int32)">
            <summary>
            Get a binary string representation of the value
            </summary>
            <param name="v">The value to get the binary string representation from</param>
            <param name="bitCount">Number of bits to show (string length)</param>
            <returns>A binary string representation of the value</returns>
        </member>
        <member name="M:SysWeaver.IntegerBitExt.AsBinary(System.Int32,System.Int32)">
            <summary>
            Get a binary string representation of the value
            </summary>
            <param name="v">The value to get the binary string representation from</param>
            <param name="bitCount">Number of bits to show (string length)</param>
            <returns>A binary string representation of the value</returns>
        </member>
        <member name="T:SysWeaver.InterlockedEx">
            <summary>
            Some efficient lock free interlocked methods
            </summary>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Max(System.Int64@,System.Int64)">
            <summary>
            Updates a memory location with the maximum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The maximum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Min(System.Int64@,System.Int64)">
            <summary>
            Updates a memory location with the minimum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The minimum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Max(System.Int32@,System.Int32)">
            <summary>
            Updates a memory location with the maximum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The maximum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Min(System.Int32@,System.Int32)">
            <summary>
            Updates a memory location with the minimum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The minimum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Max(System.Double@,System.Double)">
            <summary>
            Updates a memory location with the maximum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The maximum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Min(System.Double@,System.Double)">
            <summary>
            Updates a memory location with the minimum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The minimum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Max(System.Single@,System.Single)">
            <summary>
            Updates a memory location with the maximum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The maximum of the two values</returns>
        </member>
        <member name="M:SysWeaver.InterlockedEx.Min(System.Single@,System.Single)">
            <summary>
            Updates a memory location with the minimum of that location and the specified value
            </summary>
            <param name="value">The location of the value to update</param>
            <param name="c">The value to update with</param>
            <returns>The minimum of the two values</returns>
        </member>
        <member name="T:SysWeaver.IServicePausable">
            <summary>
            Any object registered to the service manager will have the Pause and Continue called when a service is paused
            </summary>
        </member>
        <member name="M:SysWeaver.IServicePausable.Pause">
            <summary>
            Called whenever a service is paused
            </summary>
        </member>
        <member name="M:SysWeaver.IServicePausable.Continue">
            <summary>
            Called whenever a service is resumed
            </summary>
        </member>
        <member name="P:SysWeaver.LanguageTemplate.ExtBuilders">
            <summary>
            Map for handling different extensions
            </summary>
        </member>
        <member name="M:SysWeaver.LanguageTemplate.AddHandler(System.String,SysWeaver.LanguageTemplate.LangHandler)">
            <summary>
            Add an extension handler
            </summary>
            <param name="ext">The file extension to add a handler for</param>
            <param name="fn">The function that create a language template for that extension</param>
            <returns>True if the handler was added, else false</returns>
        </member>
        <member name="M:SysWeaver.LanguageTemplate.RemoveHandler(System.String)">
            <summary>
            Remove an extension handler
            </summary>
            <param name="ext">The file extension to remove the handler for</param>
            <returns>True if the handler was removed, else false</returns>
        </member>
        <member name="F:SysWeaver.LanguageTemplate.Text">
            <summary>
            The modified text (with variables using the ${Var} syntax.
            </summary>
        </member>
        <member name="F:SysWeaver.LanguageTemplate.Vars">
            <summary>
            The variables used in the text.
            </summary>
        </member>
        <member name="T:SysWeaver.ManagedFile">
            <summary>
            An object that represents a file.
            The file can be located locally on disc or remote using http/https.
            When the file change, the data is read and a callback is triggered
            </summary>
        </member>
        <member name="M:SysWeaver.ManagedFile.#ctor(SysWeaver.ManagedFileParams,System.Func{SysWeaver.ManagedFileData,System.Threading.Tasks.Task})">
            <summary>
            Create a managed file object.
            The file can be located locally on disc or remote using http/https.
            When the file change, the data is read and a callback is triggered
            </summary>
            <param name="p">The parameters</param>
            <param name="onChange">The callback to invoke whenever the file data has changed</param>
        </member>
        <member name="M:SysWeaver.ManagedFile.#ctor(SysWeaver.ManagedFileParams,System.Action{SysWeaver.ManagedFileData})">
            <summary>
            Create a managed file object.
            The file can be located locally on disc or remote using http/https.
            When the file change, the data is read and a callback is triggered
            </summary>
            <param name="p">The parameters</param>
            <param name="onChange">The callback to invoke whenever the file data has changed</param>
        </member>
        <member name="M:SysWeaver.ManagedFile.TryGetNowAsync">
            <summary>
            Get the current state of the file.
            If the file haven't been read yet, try to read it.
            May throw an exception if the read fails.
            </summary>
            <returns>The managed file data</returns>
        </member>
        <member name="M:SysWeaver.ManagedFile.TryGetNow">
            <summary>
            Get the current state of the file.
            If the file haven't been read yet, try to read it.
            May throw an exception if the read fails.
            </summary>
            <returns>The managed file data</returns>
        </member>
        <member name="F:SysWeaver.ManagedFile.Location">
            <summary>
            The location of the file.
            </summary>
        </member>
        <member name="F:SysWeaver.ManagedFile.Exceptions">
            <summary>
            Exception tracking.
            </summary>
        </member>
        <member name="P:SysWeaver.ManagedFile.ChangeCount">
            <summary>
            Number of time the data have been changed (including the first successfull read).
            </summary>
        </member>
        <member name="P:SysWeaver.ManagedFile.HashEqualCount">
            <summary>
            Number of times the hash have been equal and thus a change have been ignored.
            </summary>
        </member>
        <member name="P:SysWeaver.ManagedFile.CurrentData">
            <summary>
            Get the current data (no reading will be done, may be null if the file haven't been read yet)
            </summary>
        </member>
        <member name="T:SysWeaver.ManagedFileData">
            <summary>
            The current state of a managed file
            </summary>
        </member>
        <member name="T:SysWeaver.ManagedFileParams">
            <summary>
            Paramaters for a managed file, the credetial parameters are used for web based files
            </summary>
        </member>
        <member name="F:SysWeaver.ManagedFileParams.Location">
            <summary>
            The file location, can be located locally on disc or remote using http/https.
            Can use path variables, ex:
                        $(CommonApplicationData) = The directory that serves as a common repository for application-specific data that is used by all users.
                        $(LocalApplicationData) = The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.
                        $(ApplicationData) = The directory that serves as a common repository for application-specific data for the current roaming user (typically settings that should be shared between systems).
                        $(MyPictures) = The My Pictures folder.
                        $(AppName) = Application name.
                        $(Executable) = Full path to the executable.
                        $(ExecutableDir) = ExecutableDir.
                        $(ExecutableBase) = Full path to the folder where the application is.
                        $(Cc) = A "unique" id for this process
            </summary>
        </member>
        <member name="F:SysWeaver.ManagedFileParams.LocalGraceTime">
            <summary>
            For local files, this is the delay in ms before invoking the onChange. 
            Some application may write a file using several operations, by ensuring that nothing has changed for a certain period, the odds are greater that the file is fully written
            </summary>
        </member>
        <member name="F:SysWeaver.ManagedFileParams.HttpPollFrequency">
            <summary>
            For web based files, poll for changes at this frequency
            </summary>
        </member>
        <member name="F:SysWeaver.ManagedFileParams.HashCheck">
            <summary>
            If true and a file have changed (typically based on file data), the data will be hashed and compared to the existing data, if they are equal no change notification will be sent
            </summary>
        </member>
        <member name="M:SysWeaver.MathExt.Gcd(System.UInt64,System.UInt64)">
            <summary>
            Compute the greatest common divisor of two number (the larges integer that evenly diveds both a and b)
            </summary>
            <param name="a">One numbers</param>
            <param name="b">Second number</param>
            <returns>The greatest common divisor of a and b (the larges integer that evenly diveds both a and b)</returns>
        </member>
        <member name="M:SysWeaver.MathExt.Gcd(System.Int64,System.Int64)">
            <summary>
            Compute the greatest common divisor of two number (the larges integer that evenly diveds both a and b)
            </summary>
            <param name="a">One numbers</param>
            <param name="b">Second number</param>
            <returns>The greatest common divisor of a and b (the larges integer that evenly diveds both a and b)</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.ToMemory``1(System.Span{``0})">
            <summary>
            Get as memory (no copying is done).
            Lifetime management must be done by the callee.
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="t">The source data</param>
            <returns>Memory</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.ToMemory``1(System.IntPtr,System.Int32)">
            <summary>
            Get as memory (no copying is done).
            Lifetime management must be done by the callee.
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="ptr">The memory address</param>
            <param name="length">The length as the number of T's</param>
            <returns>Memory</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.ToMemory``1(``0*,System.Int32)">
            <summary>
            Get as memory (no copying is done).
            Lifetime management must be done by the callee.
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="ptr">The memory address</param>
            <param name="length">The length as the number of T's</param>
            <returns>Memory</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.ToMemory(System.IntPtr,System.Int32)">
            <summary>
            Get as memory (no copying is done)
            Lifetime management must be done by the callee.
            </summary>
            <param name="ptr">The memory address</param>
            <param name="length">The length as the number of bytes</param>
            <returns>Memory</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.ToMemory(System.Void*,System.Int32)">
            <summary>
            Get as memory (no copying is done)
            Lifetime management must be done by the callee.
            </summary>
            <param name="ptr">The memory address</param>
            <param name="length">The length as the number of bytes</param>
            <returns>Memory</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.ToMemory``1(System.ReadOnlySpan{``0})">
            <summary>
            Get as readonly memory (no copying is done)
            Lifetime management must be done by the callee.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="t">The source data</param>
            <returns>Memory</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.StreamProcess``1(System.ReadOnlySpan{``0},System.Action{System.IO.Stream})">
            <summary>
            Process a span as a stream ( no copying is done)
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="mem">The memory to read from</param>
            <param name="onStream">The action to perform on the stream</param>
        </member>
        <member name="M:SysWeaver.Memory.Mem.StreamProcess``2(System.ReadOnlySpan{``1},System.Func{System.IO.Stream,``0})">
            <summary>
            Process a span as a stream ( no copying is done).
            </summary>
            <typeparam name="T">The element type</typeparam>
            <typeparam name="R">The return type</typeparam>
            <param name="mem">The memory to read from</param>
            <param name="onStream">The action to perform on the stream</param>
            <returns>The result of the onStream function</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.StreamProcess``2(System.ReadOnlySpan{``0},System.Action{System.IO.Stream,``1},``1)">
            <summary>
            Process a span as a stream ( no copying is done)
            </summary>
            <typeparam name="T">The element type</typeparam>
            <typeparam name="A">The custom argument type</typeparam>
            <param name="mem">The memory to read from</param>
            <param name="onStream">The action to perform on the stream</param>
            <param name="arg">An custom argument that is passed to the on stream action</param>
        </member>
        <member name="M:SysWeaver.Memory.Mem.StreamProcess``3(System.ReadOnlySpan{``1},System.Func{System.IO.Stream,``2,``0},``2)">
            <summary>
            Process a span as a stream ( no copying is done).
            </summary>
            <typeparam name="T">The element type</typeparam>
            <typeparam name="R">The return type</typeparam>
            <typeparam name="A">The custom argument type</typeparam>
            <param name="mem">The memory to read from</param>
            <param name="onStream">The action to perform on the stream</param>
            <param name="arg">An custom argument that is passed to the on stream function</param>
            <returns>The result of the onStream function</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.TryGetArray``1(System.Memory{``0})">
            <summary>
            Try to get an array from some memory
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="mem">The memory to get an array from</param>
            <returns>An array from the memory region (or null if it failed)</returns>
        </member>
        <member name="M:SysWeaver.Memory.Mem.TryGetArray``1(System.ReadOnlyMemory{``0})">
            <summary>
            Try to get an array from some readonly memory.
            Warning! The returned array may be written to but since this is supposed to be readonly memory, don't do it (it may also crash).
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="mem">The memory to get an array from</param>
            <returns>An array from the memory region (or null if it failed)</returns>
        </member>
        <member name="T:SysWeaver.Memory.UnmanagedMemoryManager`1">
            <summary>
            A MemoryManager over a raw pointer
            </summary>
            <remarks>The pointer is assumed to be fully unmanaged, or externally pinned - no attempt will be made to pin this data</remarks>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.#ctor(System.Span{`0})">
            <summary>
            Create a new UnmanagedMemoryManager instance at the given pointer and size
            </summary>
            <remarks>It is assumed that the span provided is already unmanaged or externally pinned</remarks>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Create a new UnmanagedMemoryManager instance at the given pointer and size
            </summary>
            <remarks>It is assumed that the span provided is already unmanaged or externally pinned</remarks>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.#ctor(`0*,System.Int32)">
            <summary>
            Create a new UnmanagedMemoryManager instance at the given pointer and size
            </summary>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Create a new UnmanagedMemoryManager instance at the given pointer and size
            </summary>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.GetSpan">
            <summary>
            Obtains a span that represents the region
            </summary>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.Pin(System.Int32)">
            <summary>
            Provides access to a pointer that represents the data (note: no actual pin occurs)
            </summary>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.Unpin">
            <summary>
            Has no effect
            </summary>
        </member>
        <member name="M:SysWeaver.Memory.UnmanagedMemoryManager`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources associated with this object
            </summary>
        </member>
        <member name="P:SysWeaver.Memory.UnmanagedMemoryManager`1.ReadOnlyMemory">
            <summary>
            Get some readonly memory
            </summary>
        </member>
        <member name="M:SysWeaver.MemoryExtensions.ToHex(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Converts some data into a hexadecimal string
            </summary>
            <param name="bytes">The data</param>
            <returns>A hexadecimal string</returns>
        </member>
        <member name="T:SysWeaver.MemoryFile">
            <summary>
            Use to represent a "file".
            If mime = null and data = null, Name is a link to the "file".
            </summary>
        </member>
        <member name="F:SysWeaver.MemoryFile.Name">
            <summary>
            Recomended filename
            </summary>
        </member>
        <member name="F:SysWeaver.MemoryFile.Mime">
            <summary>
            Mime type
            </summary>
        </member>
        <member name="F:SysWeaver.MemoryFile.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:SysWeaver.Message">
            <summary>
            Represents a log message
            </summary>
        </member>
        <member name="F:SysWeaver.Message.Debug">
            <summary>
            Log format string for debugging (very verbose)
            </summary>
        </member>
        <member name="F:SysWeaver.Message.UserConsole">
            <summary>
            Log format string for interactive user sessions (not too verbose)
            </summary>
        </member>
        <member name="F:SysWeaver.Message.ServerConsole">
            <summary>
            Log format string for long running, non-interactive sessions
            </summary>
        </member>
        <member name="M:SysWeaver.Message.Format(System.String)">
            <summary>
            Returns a formatted log message string, given a formatting string, string formatter.
            </summary>
            <param name="format">The string formatter, argumets are:
            0: Int64 Id
            1: String Text
            2: Exception Exception (or null)
            3: MessageLevels Level
            4: DateTime Time
            5: In32 ThreadId
            </param>
            <returns>A formatted log message</returns>
        </member>
        <member name="F:SysWeaver.Message.Id">
            <summary>
            Message id (unique number)
            </summary>
        </member>
        <member name="F:SysWeaver.Message.Time">
            <summary>
            The time when the message has created
            </summary>
        </member>
        <member name="F:SysWeaver.Message.Level">
            <summary>
            Message level
            </summary>
        </member>
        <member name="F:SysWeaver.Message.Prefix">
            <summary>
            Prefix to add at every new line before the message text (handles tabs etc)
            </summary>
        </member>
        <member name="F:SysWeaver.Message.OrgPrefix">
            <summary>
            Original prefix without padding
            </summary>
        </member>
        <member name="F:SysWeaver.Message.Text">
            <summary>
            Message text
            </summary>
        </member>
        <member name="F:SysWeaver.Message.ThreadId">
            <summary>
            The thread that created the message
            </summary>
        </member>
        <member name="F:SysWeaver.Message.Exception">
            <summary>
            Exception (or null)
            </summary>
        </member>
        <member name="F:SysWeaver.Message.TextStyles.Normal">
            <summary>
            Minimal details
            </summary>
        </member>
        <member name="F:SysWeaver.Message.TextStyles.Verbose">
            <summary>
            Plenty of details
            </summary>
        </member>
        <member name="F:SysWeaver.Message.TextStyles.Debug">
            <summary>
            Even more details
            </summary>
        </member>
        <member name="M:SysWeaver.Message.GetDate(System.String)">
            <summary>
            Get new date strings
            </summary>
            <param name="prev"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Message.GetText(SysWeaver.Message.TextStyles)">
            <summary>
            Get the formatted message text
            </summary>
            <param name="style">The styling of the text</param>
            <returns>Formatted message text</returns>
        </member>
        <member name="T:SysWeaver.MessageHandler">
            <summary>
            Base class for message handlers
            </summary>
        </member>
        <member name="F:SysWeaver.MessageHandler.Modes.NativeSync">
            <summary>
            Use when the add method isn't async
            </summary>
        </member>
        <member name="M:SysWeaver.MessageHost.AddMessageHandler(SysWeaver.MessageHandler)">
            <summary>
            Add a message handler to the message host
            </summary>
            <param name="h">Message handler instance</param>
            <returns>True if it was added, else false (it already existed)</returns>
        </member>
        <member name="M:SysWeaver.MessageHost.RemoveMessageHandler(SysWeaver.MessageHandler)">
            <summary>
            Remove a message handler from the message host
            </summary>
            <param name="h">Message handler instance</param>
            <returns>True if it was removed, else false (it didn't exist)</returns>
        </member>
        <member name="F:SysWeaver.MessageHost.DefaultMessageLevel">
            <summary>
            The default message filter level used
            </summary>
        </member>
        <member name="P:SysWeaver.MessageHost.AcceptMessageAbove">
            <summary>
            Only accept message with a message level above this value
            </summary>
        </member>
        <member name="M:SysWeaver.MessageHost.AddMessage(System.String,SysWeaver.MessageLevels)">
            <summary>
            Add a new message
            </summary>
            <param name="message">The text to add</param>
            <param name="level">Optional message level</param>
        </member>
        <member name="M:SysWeaver.MessageHost.AddMessage(System.String,System.Exception,SysWeaver.MessageLevels)">
            <summary>
            Add a new message
            </summary>
            <param name="message">The text to add</param>
            <param name="ex">An exception</param>
            <param name="level">Optional message level</param>
        </member>
        <member name="P:SysWeaver.MessageHost.TabSpaces">
            <summary>
            Number of spaces per tab
            </summary>
        </member>
        <member name="M:SysWeaver.MessageHost.Tab(System.Int32)">
            <summary>
            Tabulate in, dispose the returned value to "un tab"
            </summary>
            <param name="count">Number of tabs to apply</param>
            <returns>An object that should be disposed to "un tab"</returns>
        </member>
        <member name="M:SysWeaver.MessageHost.Flush">
            <summary>
            Wait for all async handling to complete, and call flush on all message handlers
            </summary>
        </member>
        <member name="T:SysWeaver.MessageLevels">
            <summary>
            The log level of the message
            </summary>
        </member>
        <member name="M:SysWeaver.NetworkTools.GetAnyLanIP(System.String)">
            <summary>
            Get the first valid LAN ip found
            </summary>
            <param name="mustStartWith">If not null, the first number in the IP must match this, valid values are: "192", "172", "10"</param>
            <returns>null if no LAN ip is found</returns>
        </member>
        <member name="M:SysWeaver.NetworkTools.GetAllLanIps">
            <summary>
            Get all LAN ip's
            </summary>
            <returns>null if no LAN ip is found</returns>
        </member>
        <member name="M:SysWeaver.NetworkTools.WaitForLanIp(System.Int32,System.String)">
            <summary>
            Wait for a LAN ip to be available (useful when running as a service and the network stack starts after the current service)
            </summary>
            <param name="maxSeconds">Maximum number of seconds to wait</param>
            <param name="mustStartWith">If not null, the first number in the IP must match this, valid values are: "192", "172", "10"</param>
            <returns>The first found LAN ip or null if none found within the time frame</returns>
        </member>
        <member name="M:SysWeaver.NetworkTools.WaitForLanIpAsync(System.Int32,System.String)">
            <summary>
            Wait for a LAN ip to be available (useful when running as a service and the network stack starts after the current service)
            </summary>
            <param name="maxSeconds">Maximum number of seconds to wait</param>
            <param name="mustStartWith">If not null, the first number in the IP must match this, valid values are: "192", "172", "10"</param>
            <returns>The first found LAN ip or null if none found within the time frame</returns>
        </member>
        <member name="M:SysWeaver.NetworkTools.GetLocalIps">
            <summary>
            Return a list of LAN ip's
            </summary>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.ObjectHash">
            <summary>
            Contains methods for getting and mixing hashcodes.
            These are generated with maximum performance and quality in mind
            </summary>
        </member>
        <member name="T:SysWeaver.ObjectMerger">
            <summary>
            Contains a static cache that can merge identical immutable objects
            </summary>
        </member>
        <member name="M:SysWeaver.ObjectMerger.GetShared``1(``0)">
            <summary>
            Try to merge this immutable object
            </summary>
            <typeparam name="T">Type of the object, only use immutable types!</typeparam>
            <param name="obj">The object that should be merged with any other objects representing the same thing</param>
            <returns>The input object or an object representing the same thing</returns>
        </member>
        <member name="P:SysWeaver.ObjectMerger.MergeCounter">
            <summary>
            Number of merged objects
            </summary>
        </member>
        <member name="T:SysWeaver.ObjectPool">
            <summary>
            Creates object pools
            </summary>
        </member>
        <member name="T:SysWeaver.OnFileChange">
            <summary>
            Run a call back every time a file changes, must be Disposed!
            </summary>
        </member>
        <member name="M:SysWeaver.OnFileChange.#ctor(System.String,System.Action{System.String},System.Int32)">
            <summary>
            Run a call back every time a file changes, must be Disposed!
            </summary>
            <param name="filename">The file to monitor</param>
            <param name="onChange">The callback to execute when changed</param>
            <param name="delayMs">The delay in ms before invoking the onChange. 
            Some application may write a file using several operations, by ensuring that nothing has changed for a certain period, the odds are greater that the file is fully written</param>
        </member>
        <member name="T:SysWeaver.OnFileChangeAsync">
            <summary>
            Run an async Task every time a file changes, must be Disposed!
            </summary>
        </member>
        <member name="M:SysWeaver.OnFileChangeAsync.#ctor(System.String,System.Func{System.String,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Run an async Task every time a file changes, must be Disposed!
            </summary>
            <param name="filename">The file to monitor</param>
            <param name="onChange">The task to execute when changed</param>
            <param name="delayMs">The delay in ms before invoking the onChange. 
            Some application may write a file using several operations, by ensuring that nothing has changed for a certain period, the odds are greater that the file is fully written</param>
        </member>
        <member name="P:SysWeaver.OnFileChangeBase.LastExceptiion">
            <summary>
            The last exception catched
            </summary>
        </member>
        <member name="P:SysWeaver.OnFileChangeBase.ExceptionCount">
            <summary>
            The last exception catched
            </summary>
        </member>
        <member name="T:SysWeaver.ManagedFileString">
            <summary>
            Reads a string from a text file and update it when the file is changed, optionally executes a callback every time a new value is read, must be Disposed!
            </summary>
        </member>
        <member name="M:SysWeaver.ManagedFileString.#ctor(System.String,System.Action{System.String},System.Int32,System.Boolean)">
            <summary>
             Reads a string from a text file, an executes a callback every time it's changed, must be Disposed!
            </summary>
            <param name="filename">The file to monitor</param>
            <param name="onChange">The callback to execute when changed, the first trimmed line of text is supplied (unless it starts with a '#')</param>
            <param name="delayMs">The delay in ms before invoking the onChange.
            Some application may write a file using several operations, by ensuring that nothing has changed for a certain period, the odds are greater that the file is fully written</param> 
            <param name="invokeFirst">If true, any onChange is invoked in the constructor (if the file exist and have data).</param> 
        </member>
        <member name="F:SysWeaver.ManagedFileString.Exceptions">
            <summary>
            Collects exceptions caught when reading, parsing or in the callback.
            </summary>
        </member>
        <member name="P:SysWeaver.ManagedFileString.Data">
            <summary>
            The current value (as read)
            </summary>
        </member>
        <member name="T:SysWeaver.ManagedString">
            <summary>
            Contains a string value.
            Can be a string literal or a name of an existing file.
            If it's a file, the first non-empty line (after trimming) that doesn't start with a '#' is used.
            If the file content changes, the string value is re-read and the optional onChange callback is invoked.
            </summary>
        </member>
        <member name="M:SysWeaver.ManagedString.#ctor(System.String,System.Action{System.String},System.Int32)">
            <summary>
            Contains a string value.
            Can be a string literal or a name of an existing file.
            If it's a file, the first non-empty line (after trimming) that doesn't start with a '#' is used.
            If the file content changes, the string value is re-read and the optional onChange callback is invoked.
            </summary>
            <param name="value">The value of the string, or a name of an existing file</param>
            <param name="onChange">The callback to execute when changed</param>
            <param name="delayMs">The delay in ms before invoking the onChange.
            Some application may write a file using several operations, by ensuring that nothing has changed for a certain period, the odds are greater that the file is fully written</param>
        </member>
        <member name="M:SysWeaver.OrderedMerge.Merge``1(System.Func{``0,``0,System.Boolean},System.Int32,System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Merge any number of ordered lists, resulting in a new ordered list using O(N) complexity.
            Lists will be interleaved if it's a tie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isBetter">A function that should return true if the first argument is better than the second (using the same logic as when sorting)</param>
            <param name="maxLength">Maximum length of the output list</param>
            <param name="lists">Array of lists to merge</param>
            <returns>A new merged ordered list</returns>
        </member>
        <member name="M:SysWeaver.OrderedMerge.Merge``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Merge any number of ordered lists, resulting in a new ordered list using O(N) complexity.
            Lists will be interleaved if it's a tie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isBetter">A function that should return true if the first argument is better than the second (using the same logic as when sorting)</param>
            <param name="lists">Array of lists to merge</param>
            <returns>A new merged ordered list</returns>
        </member>
        <member name="M:SysWeaver.OrderedMerge.Merge``1(System.Int32,System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Merge any number of ordered lists, resulting in a new ordered list using O(N) complexity.
            Lists will be interleaved if it's a tie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maxLength">Maximum length of the output list</param>
            <param name="lists">Array of lists to merge</param>
            <returns>A new merged ordered list</returns>
        </member>
        <member name="M:SysWeaver.OrderedMerge.MergeDesc``1(System.Int32,System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Merge any number of ordered lists, resulting in a new ordered list in reverse order using O(N) complexity.
            Lists will be interleaved if it's a tie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="maxLength">Maximum length of the output list</param>
            <param name="lists">Array of lists to merge</param>
            <returns>A new merged ordered list</returns>
        </member>
        <member name="M:SysWeaver.OrderedMerge.Merge``1(System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Merge any number of ordered lists, resulting in a new ordered list using O(N) complexity.
            Lists will be interleaved if it's a tie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lists">Array of lists to merge</param>
            <returns>A new merged ordered list</returns>
        </member>
        <member name="M:SysWeaver.OrderedMerge.MergeDesc``1(System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Merge any number of ordered lists, resulting in a new ordered list in reverse order using O(N) complexity.
            Lists will be interleaved if it's a tie.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lists">Array of lists to merge</param>
            <returns>A new merged ordered list</returns>
        </member>
        <member name="M:SysWeaver.PathExt.RootExecutable(System.String)">
            <summary>
            Make a path relative to the executables path if it's not already rooted
            </summary>
            <param name="path">A relative or rooted path</param>
            <returns>A rooted path</returns>
        </member>
        <member name="M:SysWeaver.PathExt.RootCurrent(System.String)">
            <summary>
            Make a path relative to the current path if it's not already rooted
            </summary>
            <param name="path">A relative or rooted path</param>
            <returns>A rooted path</returns>
        </member>
        <member name="M:SysWeaver.PathExt.IsValidFilename(System.String)">
            <summary>
            Check if a filename without a path is valid, ex: "Filename.txt".
            </summary>
            <param name="filename">The filename to test</param>
            <returns>True if valid, only way to make sure is to actuallty try to use it though</returns>
        </member>
        <member name="M:SysWeaver.PathExt.IsValidFolderPath(System.String)">
            <summary>
            Check if a folder with a path is valid, ex: "C:\Windows\System32".
            </summary>
            <param name="dirPath">The path to the directory to test</param>
            <returns>True if valid, only way to make sure is to actuallty try to use it though</returns>
        </member>
        <member name="M:SysWeaver.PathExt.IsValidFilePath(System.String)">
            <summary>
            Check if a file with a path is valid, ex: "C:\Windows\System32\Filename.txt".
            </summary>
            <param name="fullPath">The path to the file to test</param>
            <returns>True if valid, only way to make sure is to actuallty try to use it though</returns>
        </member>
        <member name="M:SysWeaver.PathExt.SafeFilename(System.String)">
            <summary>
            Replaces all bad filename chars in the input string with '_'
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.PathExt.IsValidSubPath(System.String)">
            <summary>
            Validate that the path doesn't contain ".", ".." or any invalid chars, including volume separator
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.PathExt.GetFullDirectoryName(System.String)">
            <summary>
            Get the full directory name (fixes casing)
            </summary>
            <param name="directoryName">Name of an absolute or relative directory</param>
            <returns>A full directory name with correct case</returns>
        </member>
        <member name="M:SysWeaver.PathExt.GetFullFileName(System.String)">
            <summary>
            Get the full filer name (fixes casing)
            </summary>
            <param name="fileName">Name of an absolute or relative file</param>
            <returns>A full file name with correct case</returns>
        </member>
        <member name="M:SysWeaver.PathExt.EnsureFolderExist(System.String,System.Int32,System.Int32)">
            <summary>
            Make sure a folder exists.
            If the folder doesn't exist it will be created.
            If the create fails it can retry.
            </summary>
            <param name="folder">The folder</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the folder exists, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.EnsureCanWriteFile(System.String,System.Int32,System.Int32)">
            <summary>
            Make sure that the folder containing thie supplied filename exists.
            If the folder doesn't exist it will be created.
            If the create fails it can retry.
            </summary>
            <param name="filename">The filename that it's containing folder must exist</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the folder exists, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.EnsureFolderExistAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Make sure a folder exists.
            If the folder doesn't exist it will be created.
            If the create fails it can retry.
            </summary>
            <param name="folder">The folder</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the folder exists, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.EnsureCanWriteFileAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Make sure that the folder containing thie supplied filename exists.
            If the folder doesn't exist it will be created.
            If the create fails it can retry.
            </summary>
            <param name="filename">The filename that it's containing folder must exist</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the folder exists, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.TryDeleteFile(System.String,System.Int32,System.Int32)">
            <summary>
            Delete a file if it exists.
            If it fails, retry at least N times.
            </summary>
            <param name="filename">The file to delete</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the file doesn't exist anymore, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.TryDeleteFileAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Delete a file if it exists.
            If it fails, retry at least N times.
            </summary>
            <param name="filename">The file to delete</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the file doesn't exist anymore, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.TryDeleteDirectory(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Delete a directory if it exists.
            If it fails, retry at least N times.
            </summary>
            <param name="directory">The directory to delete</param>
            <param name="onlyEmpty">Only delete the directory if it's empty</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the directory doesn't exists, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.TryDeleteDirectoryAsync(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Delete a directory if it exists.
            If it fails, retry at least N times.
            </summary>
            <param name="directory">The directory to delete</param>
            <param name="onlyEmpty">Only delete the directory if it's empty</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the directory doesn't exists, else the exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.TryRemoveEmptyFolders(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Delete all empty directories in the supplied folder, or any subfolder.
            </summary>
            <param name="directory">The directory to clean up</param>
            <param name="deleteDirectoryIfEmpty">If true, the directory it self will be remove if it's empty</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the clean up was successful, else the first exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.TryRemoveEmptyFoldersAsync(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Delete all empty directories in the supplied folder, or any subfolder.
            </summary>
            <param name="directory">The directory to clean up</param>
            <param name="deleteDirectoryIfEmpty">If true, the directory it self will be remove if it's empty</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
            <returns>Null if the clean up was successful, else the first exception</returns>
        </member>
        <member name="M:SysWeaver.PathExt.IsWeb(System.String)">
            <summary>
            The functions used to determine if the file is a web file or a local file
            </summary>
            <param name="filename"></param>
            <returns>True if the file is a web file</returns>
        </member>
        <member name="M:SysWeaver.PathExt.ExtractWebFilename(System.String)">
            <summary>
            Get the filename part from an url
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.PathTemplate">
            <summary>
            Resolve a "path" template to a full path.
            Variables in the template starts with "$(" and ends with ")".
            Variables can be any value of the Environment.SpecialFolder enum, or any of the ones in the supplied dictionary.
            Ex:
            "$(LocalApplicationData)\MyAppsData\StateBlockUntil.json"
            Some common folder variables:
                        $(CommonApplicationData) = The directory that serves as a common repository for application-specific data that is used by all users.
                        $(LocalApplicationData) = The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.
                        $(ApplicationData) = The directory that serves as a common repository for application-specific data for the current roaming user (typically settings that should be shared between systems).
                        $(MyPictures) = The My Pictures folder.
            Env info variables:
                        $(ExeAppName) = Name of the executable.
                        $(Executable) = Full path to the executable.
                        $(ExecutableDir) = ExecutableDir.
                        $(ExecutableBase) = Full path to the folder where the application is.
                        $(AppInstance) = A "unique" id for this process
            </summary>
        </member>
        <member name="M:SysWeaver.PathTemplate.Resolve(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Resolve a "path" template to a full path.
            Variables in the template starts with "$(" and ends with ")".
            Variables can be any value of the Environment.SpecialFolder enum, or any of the ones in the supplied dictionary.
            Formatting as described in the TextTemplate type can be used ("$(*Var)" is useful for paths).
            Ex:
            "$(LocalApplicationData)\MyAppsData\StateBlockUntil.json"
            Some common folders:
                        $(CommonApplicationData) = The directory that serves as a common repository for application-specific data that is used by all users.
                        $(LocalApplicationData) = The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.
                        $(ApplicationData) = The directory that serves as a common repository for application-specific data for the current roaming user (typically settings that should be shared between systems).
                        $(MyPictures) = The My Pictures folder.
            </summary>
            <param name="template">The template, variables start with "$(" and ends with ")".</param>
            <param name="extra">Optional extra variables. If case insesitive is specified, all keys will be lower-cased</param>
            <param name="caseInSensitive">If true the variable names is case in-sensitive</param>
            <param name="useEnv">Variable from EnvInfo.TextVars is available:
                        $(ExeAppName) = Name of the executable.
                        $(Executable) = Full path to the executable.
                        $(ExecutableDir) = ExecutableDir.
                        $(ExecutableBase) = Full path to the folder where the application is.
                        $(AppInstance) = A "unique" id for this process
            </param>
            <returns>The resolved path</returns>
        </member>
        <member name="T:SysWeaver.IPerfMonitored">
            <summary>
            Used to mark a type as having a performance monitor (may be collected by a table etc)
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfMonitored.PerfMon">
            <summary>
            The performance monitor instance
            </summary>
        </member>
        <member name="T:SysWeaver.PerfMonitor">
            <summary>
            A performance monitor collector instance
            </summary>
        </member>
        <member name="F:SysWeaver.PerfMonitor.EnableAny">
            <summary>
            Globally enable/disable all
            </summary>
        </member>
        <member name="P:SysWeaver.PerfMonitor.Enabled">
            <summary>
            Enable/disable performance tracking
            </summary>
        </member>
        <member name="F:SysWeaver.PerfMonitor.System">
            <summary>
            System name
            </summary>
        </member>
        <member name="P:SysWeaver.PerfMonitor.Actions">
            <summary>
            Reset the performance counters for this system
            </summary>
        </member>
        <member name="M:SysWeaver.PerfMonitor.Reset">
            <summary>
            Reset all counters
            </summary>
        </member>
        <member name="M:SysWeaver.PerfMonitor.#ctor(System.String)">
            <summary>
            Create a new peformance tracker
            </summary>
            <param name="systemName"></param>
        </member>
        <member name="M:SysWeaver.PerfMonitor.GetEnumerator">
            <summary>
            Get current performance information
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.PerfMonitor.GetTimestamp">
            <summary>
            Get a stopwatch time stamp
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.PerfMonitor.GetEllapsed(System.Int64)">
            <summary>
            Ellapsed tíme since a given stopwatch time stamp
            </summary>
            <param name="sinceTimeStamp"></param>
            <returns></returns>
        </member>
        <member name="F:SysWeaver.PerfMonitor.ToTicks">
            <summary>
            Convert from stop watchticks to time span ticks
            </summary>
        </member>
        <member name="M:SysWeaver.PerfMonitor.ToTimeSpan(System.Int64)">
            <summary>
            Convert from stopwatch ticks to time span
            </summary>
            <param name="stopWatchTicks">Stopwatch ticks</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="P:SysWeaver.IPerfMesurement.Ellapsed">
            <summary>
            Time taken so far, in stop watch ticks
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfMesurement.StartTimeStamp">
            <summary>
            Get the start time stamp
            </summary>
        </member>
        <member name="P:SysWeaver.PerfMesurement.Ellapsed">
            <summary>
            Time taken so far, in stop watch ticks
            </summary>
        </member>
        <member name="P:SysWeaver.PerfMesurement.StartTimeStamp">
            <summary>
            Get the start time stamp
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.System">
            <summary>
            The system that captured this performance entry
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Name">
            <summary>
            The name of the measured "method"
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Count">
            <summary>
            The total number of times that the "method" have been executed / measured.
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.InProgress">
            <summary>
            Number of current concurrent executions of the "method".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.MaxConcurrency">
            <summary>
            The maximum number of concurrrent executions of the "method".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Total">
            <summary>
            The total time spent executing the "method".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Average">
            <summary>
            The avergae time spent executing one execution of the "method".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Percentage">
            <summary>
            The pecentage of time spent in this "method".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Rate">
            <summary>
            The number of times per second that this "method" have been called.
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.LastDuration">
            <summary>
            The duration of the last execution of this "method".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.LastExecution">
            <summary>
            When the "method" was last executed (completed).
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Min">
            <summary>
            The minimum duration of a method "execution".
            </summary>
        </member>
        <member name="P:SysWeaver.IPerfEntry.Max">
            <summary>
            The maximum duration of a method "execution".
            </summary>
        </member>
        <member name="T:SysWeaver.PeriodicCancellationTokenSource">
            <summary>
            A cancellation token source that periodically exexcutes a callback to determine if it's time to cancel
            </summary>
        </member>
        <member name="T:SysWeaver.PeriodicTask">
            <summary>
            Executes a task periodically (with a delay between executions)
            </summary>
        </member>
        <member name="M:SysWeaver.PeriodicTask.#ctor(System.Func{System.Boolean},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Runs an action concurrently periodically with the specfied delay inbetween
            </summary>
            <param name="func">The function to execute at the given interval</param>
            <param name="sleepMs">Number of milliseconds to to pause between each task execution</param>
            <param name="runNow">Set to true to start immediately</param>
            <param name="continueOnException">If set to true and the action casts an exception, continue the periodic execution anyway</param>
            <param name="initialDelay">If runNow is true, delay the first execution using the sleepMs parameter</param>
        </member>
        <member name="M:SysWeaver.PeriodicTask.#ctor(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Runs a task concurrently periodically with the specfied delay inbetween
            </summary>
            <param name="createTask">A function that creates the task to run at the given interval</param>
            <param name="sleepMs">Number of milliseconds to to pause between each task execution</param>
            <param name="runNow">Set to true to start immediately</param>
            <param name="continueOnException">If set to true and the task or it's creation casts an exception, continue the periodic execution anyway</param>
            <param name="initialDelay">If runNow is true, delay the first execution using the sleepMs parameter</param>
        </member>
        <member name="M:SysWeaver.PeriodicTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Runs a task concurrently periodically with the specfied delay inbetween, this task can be cancelled
            </summary>
            <param name="createTask">A function that creates the task to run at the given interval, this task should be able to cancle using the canellation token provided</param>
            <param name="sleepMs">Number of milliseconds to to pause between each task execution</param>
            <param name="runNow">Set to true to start immediately</param>
            <param name="continueOnException">If set to true and the task or it's creation casts an exception, continue the periodic execution anyway</param>
            <param name="initialDelay">If runNow is true, delay the first execution using the sleepMs parameter</param>
        </member>
        <member name="F:SysWeaver.PeriodicTask.SleepMs">
            <summary>
            Number of milliseconds to to pause between each task execution
            </summary>
        </member>
        <member name="M:SysWeaver.PeriodicTask.TryStart(System.Boolean)">
            <summary>
            Start execution of the periodic task if it's not already running
            </summary>
            <param name="initialDelay">Delay the first execution using the specified sleepMs parameter</param>
            <returns>True if the periodic task was started or false if it's already running</returns>
        </member>
        <member name="M:SysWeaver.PeriodicTask.Start(System.Boolean)">
            <summary>
            Start execution of the periodic task if it's not already running
            </summary>
            <param name="initialDelay">Delay the first execution using the specified sleepMs parameter</param>
        </member>
        <member name="P:SysWeaver.PeriodicTask.IsRunning">
            <summary>
            True if the periodic task is running
            </summary>
        </member>
        <member name="P:SysWeaver.PeriodicTask.Exception">
            <summary>
            If the task throws an exception, the last one is stored here (the task continues to repeat even if there was an expcetion)
            </summary>
        </member>
        <member name="F:SysWeaver.PeriodicTask.CancelToken">
            <summary>
            The token used to cancel a task
            </summary>
        </member>
        <member name="F:SysWeaver.PeriodicTask.ContinueOnException">
            <summary>
            True if the periodic task is set to continue on exceptions
            </summary>
        </member>
        <member name="M:SysWeaver.PeriodicTask.TryStop(System.Action)">
            <summary>
            Try to stop the periodic task, if a task is currently being invoked, it waits for it to complete (cancellation is requested)
            </summary>
            <param name="onStopping">An optional callback to run when the task have been scheduled to stop</param>
            <returns>True if the periodic task was stopped or fasle if it wasn't running</returns>
        </member>
        <member name="M:SysWeaver.PeriodicTask.Dispose">
            <summary>
            Stop and dispose, if a task is currently being invoked, it waits for it to complete (cancellation is requested)
            </summary>
        </member>
        <member name="M:SysWeaver.PeriodicTask.RunTask(System.Boolean)">
            <summary>
            Run the task once
            </summary>
            <param name="delay">True to wait</param>
            <returns></returns>
        </member>
        <member name="F:SysWeaver.PlatformTools.Current">
            <summary>
            The platform tools for the OS that the current process is running under.
            </summary>
        </member>
        <member name="T:SysWeaver.PrefixFinder">
            <summary>
            Provides a fast way to determine what a string starts with (from a given fixed set), the string to test MUST start with one in the set
            </summary>
        </member>
        <member name="M:SysWeaver.PrefixFinder.Create(System.String[],System.Boolean)">
            <summary>
            Creates a prefix finder
            </summary>
            <param name="prefixes">The prefixes that we should match against, ex: ["http://", "https://", "ftp://", "sftp://"]</param>
            <param name="caseSensitive">True if the comparision should be case sensitive, else false</param>
            <returns>A function that given a string, returns the prefix string that it starts with.
            The given string must start with one of the pre-defined prefixes or the behaviour is undefined (can't throw exceptions or return String.Empty etc)</returns>
        </member>
        <member name="T:SysWeaver.QuickHash">
            <summary>
            Tools for computing a 32-bit hash fast.
            This is NOT a secure hash, do not use for security!
            The hash is endian specific, meaning that a hash computed over some data on a little endian machine differs from the hash computed on a big endian machine (so do not use for data transport etc).
            </summary>
        </member>
        <member name="M:SysWeaver.QuickHash.Hash(System.String,System.UInt32)">
            <summary>
            Compute a 32-bit hash for a string.
            This is NOT a secure hash, do not use for security!
            The hash is endian specific, meaning that a hash computed over some text on a little endian machine differs from the hash computed on a big endian machine (so do not use for data transport etc).
            </summary>
            <param name="text">The text to compute a hash over</param>
            <param name="seed">An optional seed</param>
            <returns>A 32-bit hash of the text</returns>
        </member>
        <member name="M:SysWeaver.QuickHash.Hash(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Compute a 32-bit hash over some data.
            This is NOT a secure hash, do not use for security!
            The hash is endian specific, meaning that a hash computed over some data on a little endian machine differs from the hash computed on a big endian machine (so do not use for data transport etc).
            </summary>
            <param name="data">The data to compute a hash over</param>
            <param name="seed">An optional seed</param>
            <returns>A 32-bit hash of the data</returns>
        </member>
        <member name="T:SysWeaver.DictionaryExt">
            <summary>
            Dictionary extensions
            </summary>
        </member>
        <member name="M:SysWeaver.DictionaryExt.KeysAsReadOnlySet``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Treats the keys of the dictionary as as read only set, changes to the underlaying dictionary is proagated
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary to treat as a read only set</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Aggregate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Func{``1,``1,``1})">
            <summary>
            Aggregates the values on a dictionary with the data from another dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary to modify</param>
            <param name="with">The dictionary to aggregate into the dictionary</param>
            <param name="func">The aggregation function</param>
            <returns>The dictionary, same object, useful for chaining</returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Add values from another dictionary into a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary to modify</param>
            <param name="with">The dictionary to add into the dictionary</param>
            <returns>The dictionary, same object, useful for chaining</returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Min``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Take the maximum value from another dictionary into a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary to modify</param>
            <param name="with">The dictionary to max into the dictionary</param>
            <returns>The dictionary, same object, useful for chaining</returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Max``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Take the maximum value from another dictionary into a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="dictionary">The dictionary to modify</param>
            <param name="with">The dictionary to max into the dictionary</param>
            <returns>The dictionary, same object, useful for chaining</returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a dictionary from a collection, if the same key is present more than once, the last is used
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="vals">Values</param>
            <param name="k">Optional equality comparer</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Create``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a dictionary from a collection, if the same key is present more than once, the last is used
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="vals">Values</param>
            <param name="k">Optional equality comparer</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.TryRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Try to remove an element from a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Freeze``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Create a frozen version of a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Freeze``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Create a frozen version of a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Freeze``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a frozen version of a dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Freeze``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Create a frozen version of a set
            </summary>
            <typeparam name="K"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Freeze``1(System.Collections.Generic.IReadOnlySet{``0})">
            <summary>
            Create a frozen version of a set
            </summary>
            <typeparam name="K"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.DictionaryExt.Freeze``1(System.Collections.Generic.IReadOnlySet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a frozen version of a set
            </summary>
            <typeparam name="K"></typeparam>
            <param name="d"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.ReplaceEmbeddedFilesAttribute">
            <summary>
            Replace embedded files (if they exist)
            </summary>
        </member>
        <member name="M:SysWeaver.Retry.Op(System.Action,System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.Op``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.OpAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.OpAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.OpAsync(System.Func{System.Threading.Tasks.ValueTask},System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.OpAsync``1(System.Func{System.Threading.Tasks.ValueTask{``0}},System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.OpAsync(System.Action,System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="M:SysWeaver.Retry.OpAsync``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            Retry an operation
            </summary>
            <param name="op">The operation to perform</param>
            <param name="retryCount">Number of times to retry the operation (create folder)</param>
            <param name="delayInMs">Number of milli seconds to wait between any retries</param>
        </member>
        <member name="T:SysWeaver.Scheduler">
            <summary>
            Schedules a task to be performed at a specified time, precision is fairly low so the task can be executed a few seconds later than scheduled.
            Two tasks that are scheduled at the same time will be executed in the order of being added.
            </summary>
        </member>
        <member name="F:SysWeaver.Scheduler.CheckFrequencyMs">
            <summary>
            Roughly the nuumber of millie seconds between each check
            </summary>
        </member>
        <member name="M:SysWeaver.Scheduler.Add(System.DateTime,System.Action,System.Boolean)">
            <summary>
            Schedule a task to be performed at a specified time, precision is fairly low so the task can be executed a few seconds later than scheduled.
            Two tasks that are scheduled at the same time will be executed in the order of being added.
            </summary>
            <param name="when">The UTC time to execute the task at, precision is fairly low so the task can be executed a few seconds later than scheduled.
            Two tasks that are scheduled at the same time will be executed in the order of being added.
            </param>
            <param name="task">The task to execute</param>
            <param name="noThrow">If true, return null instead of throwing exception</param>
            <returns>An object that can be disposed to prevent execution of the task in the future</returns>
        </member>
        <member name="M:SysWeaver.Scheduler.Add(System.DateTime,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Schedule a task to be performed at a specified time, precision is fairly low so the task can be executed a few seconds later than scheduled.
            Two tasks that are scheduled at the same time will be executed in the order of being added.
            </summary>
            <param name="when">The UTC time to execute the task at, precision is fairly low so the task can be executed a few seconds later than scheduled.
            Two tasks that are scheduled at the same time will be executed in the order of being added.
            </param>
            <param name="task">The task to execute</param>
            <param name="noThrow">If true, return null instead of throwing exception</param>
            <returns>An object that can be disposed to prevent execution of the task in the future</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetHashGuid24(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a 24 character long GUID (144 bits, 18 bytes of hash value)
            </summary>
            <param name="data">Some data (that will get hashed)</param>
            <returns>A GUID as a string</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetGuid48(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a 48 character long GUID (288 bits, 36 bytes of hash value)
            </summary>
            <param name="data">Some data (that will get hashed)</param>
            <returns>A GUID as a string</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetGuid24">
            <summary>
            Create a 24 character long GUID (144 bits, 18 bytes of rng)
            </summary>
            <returns>A GUID as a string</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetGuid48">
            <summary>
            Create a 48 character long GUID (288 bits, 36 bytes of rng)
            </summary>
            <returns>A GUID as a string</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetTimeStampGuid24(System.Int64)">
            <summary>
            Create a 24 character long GUID (144 bits, 10 bytes of rng and 8 bytes of time stamp)
            </summary>
            <param name="lifeTimeTicks">Ticks that get added to the time stamp</param>
            <returns>A GUID as a string</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetTimeStampGuid48(System.Int64)">
            <summary>
            Create a 48 character long GUID (288 bits, 28 bytes of rng and 8 bytes of time stamp)
            </summary>
            <param name="lifeTimeTicks">Ticks that get added to the time stamp</param>
            <returns>A GUID as a string</returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetTimeStampFromGuid(System.String)">
            <summary>
            Extract the time stamp from a guid created with GetTimeStampGuid**
            </summary>
            <param name="guid">A guid created using any of the GetTimeStampGuid**</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetByte">
            <summary>
            Get 8 random bits
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetUInt32">
            <summary>
            Get 32 random bits
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetUInt64">
            <summary>
            Get 64 random bits
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.SecureRng.GetNumericCode(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get a random numeric code of N-digits as a string
            </summary>
            <param name="numDigits">Number of digits (min 1)</param>
            <param name="maxRepeat">Maximum number of repeated digits, Ex: if 2, "223311" is ok, "153444" is not ok</param>
            <param name="maxInc">Maximum number of digits in an increasing or decreasing series, Ex: if 3, "123890" is ok, "543299" is not ok</param>
            <param name="nonZeroFirst">If true, the first number may not be 0</param>
            <returns>A "random" numerical string obeying the above rules</returns>
        </member>
        <member name="M:SysWeaver.Security.CertificateTools.GetExpiration(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Get the expiration time of the certificate
            </summary>
            <param name="cert">Certificate to get expiration time</param>
            <returns>The time when the certificate expires</returns>
        </member>
        <member name="M:SysWeaver.Security.CertificateTools.IsSoonExpired(System.Security.Cryptography.X509Certificates.X509Certificate2,System.DateTime@,System.Int32)">
            <summary>
            Test if a certificate is expired or will expire within a day
            </summary>
            <param name="cert">Cert to test</param>
            <param name="expires">When the cert expires</param>
            <param name="hoursBeforeExpiration">The number of hours that this certificate must be valid</param>
            <returns>True if the cert is expoired or will expire soon</returns>
        </member>
        <member name="M:SysWeaver.Security.CertificateTools.Load(System.String,System.String,System.Boolean)">
            <summary>
            Load a certificate from disc
            </summary>
            <param name="filename">.pfx file containing the cert</param>
            <param name="password">Password or password file</param>
            <param name="passwordCanBeFile">True if password may be a file</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Security.CertificateTools.Create(System.Byte[],System.String,System.Boolean)">
            <summary>
            Load a certificate from disc
            </summary>
            <param name="data">Contents of a .pfx file containing the cert</param>
            <param name="password">Password or password file</param>
            <param name="passwordCanBeFile">True if password may be a file</param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.Security.ICertificateProvider">
            <summary>
            Represents an object that provides a certificate
            </summary>
        </member>
        <member name="M:SysWeaver.Security.ICertificateProvider.GetCert">
            <summary>
            Get a certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="E:SysWeaver.Security.ICertificateProvider.OnChanged">
            <summary>
            An event that is fired whenever the certificate have changed.
            An application should restart (or re-init) to get the updated cert (calling GetCert again will return an updated cert).
            </summary>
        </member>
        <member name="M:SysWeaver.Security.IFirewallHandler.AddOrSet(System.String,System.Int32,SysWeaver.IMessageHost,System.String,SysWeaver.Security.FirewallProtcols,SysWeaver.Security.FirewallDirections)">
            <summary>
            Add a firewall rule
            </summary>
            <param name="ruleName">Name of the rule (unique id)</param>
            <param name="port">The port to open</param>
            <param name="msg">Message handler</param>
            <param name="messagePrefix">Message prefix</param>
            <param name="protocol">The protcol to open up traffic for</param>
            <param name="direction">The direction of traffic to open up</param>
            <returns>True if the rule was successfully added or changed</returns>
        </member>
        <member name="M:SysWeaver.Security.IFirewallHandler.Remove(System.String,SysWeaver.IMessageHost,System.String)">
            <summary>
            Remove a firewall rule
            </summary>
            <param name="ruleName">Name of the rule (unique id)</param>
            <param name="msg">Message handler</param>
            <param name="messagePrefix">Message prefix</param>
            <returns>True if the rule was found and removed or if the rule doesn't exist, else false</returns>
        </member>
        <member name="T:SysWeaver.SemiFrozenDictionary`2">
            <summary>
            Use this dictionary when number of reads far exceeds the number of modificatiions.
            This is thread safe in the same sense as a ConcurrentDictionary.
            Aall reads are done on a frozen copy of the underlaying dictionary.
            Mutating underlaying dictionary is done using locks and the frozen copy is invalidated.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:SysWeaver.SpanExt.ToHexString(System.Span{System.Byte})">
            <summary>
            Create a hexadecimal string representation of the data, uses the stack so don't call on to large data blobs
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.SpanExt.ToHexString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a hexadecimal string representation of the data, uses the stack so don't call on to large data blobs
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.Stats">
            <summary>
            Represents some statistics
            </summary>
        </member>
        <member name="F:SysWeaver.Stats.System">
            <summary>
            The system that this statistic belong to
            </summary>
        </member>
        <member name="F:SysWeaver.Stats.Name">
            <summary>
            The name of the statistics
            </summary>
        </member>
        <member name="F:SysWeaver.Stats.Value">
            <summary>
            The statistics value
            </summary>
        </member>
        <member name="F:SysWeaver.Stats.TF">
            <summary>
            Must contain the TypeName|Format
            </summary>
        </member>
        <member name="F:SysWeaver.Stats.Description">
            <summary>
            Description of the statistics
            </summary>
        </member>
        <member name="T:SysWeaver.IHaveStats">
            <summary>
            Instances implementing this interface can be queried for some useful stats
            </summary>
        </member>
        <member name="M:SysWeaver.IHaveStats.GetStats">
            <summary>
            Return some stats
            </summary>
            <returns>The stats</returns>
        </member>
        <member name="M:SysWeaver.StreamExt.ReadAllLines(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Read all lines of text in a stream
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="encoding">The text encoding to use, default (null) is UTF8</param>
            <param name="leaveOpen">True will leave the stream opened, false will close it</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.ReadAllText(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Read all text of a stream
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="encoding">The text encoding to use, default (null) is UTF8</param>
            <param name="leaveOpen">True will leave the stream opened, false will close it</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.ReadAllLines(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            Read all lines of text in a stream
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="leaveOpen">True will leave the stream opened, false will close it</param>
            <param name="encoding">The text encoding to use, default (null) is UTF8</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.ContainsWord(System.String,System.String,System.StringComparison)">
            <summary>
            Check if a word is found in some text, the glyph before a word may no be a letter, the glyph after a word may not be a letter.
            </summary>
            <param name="sentence"></param>
            <param name="word"></param>
            <param name="cmp"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.RemoveDiacritics(System.String)">
            <summary>
            Remove all diacritics from a string (replaces them with base values)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.RemoveQuotes(System.String)">
            <summary>
            Remove one set of quotes from a a string (if they exist).
            Ex: "apa" => apa
            'banana' => banana
            ""monkey"" => "monkey"
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.Count(System.String,System.String,System.StringComparison)">
            <summary>
            Count the number of occurances of a substring
            </summary>
            <param name="text"></param>
            <param name="subString"></param>
            <param name="com"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.RemoveChars(System.String,System.Char[])">
            <summary>
            Remove all occurances of some chars from a string.
            </summary>
            <param name="text"></param>
            <param name="removeChars">The chars to remove</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.RemoveChars(System.String,System.String)">
            <summary>
            Remove all occurances of some chars from a string.
            </summary>
            <param name="text"></param>
            <param name="removeChars">The chars to remove</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StreamExt.RemoveChars(System.String,System.Collections.Generic.IReadOnlySet{System.Char})">
            <summary>
            Remove all occurances of some chars from a string.
            </summary>
            <param name="text"></param>
            <param name="removeChars">The chars to remove</param>
            <returns></returns>
        </member>
        <member name="F:SysWeaver.StringExt.FastLower">
            <summary>
            Make an culture invariant upper case version of a string
            </summary>
        </member>
        <member name="F:SysWeaver.StringExt.FastUpper">
            <summary>
            Make an culture invariant upper case version of a string
            </summary>
        </member>
        <member name="M:SysWeaver.StringExt.FastToLower(System.String)">
            <summary>
            Make an culture invariant lower case version of a string
            </summary>
            <param name="str">The string to transform into a culture invariant lower case</param>
            <returns>Culture invariant lower case string</returns>
        </member>
        <member name="M:SysWeaver.StringExt.FastToUpper(System.String)">
            <summary>
            Make an culture invariant upper case version of a string
            </summary>
            <param name="str">The string to transform into a culture invariant upper case</param>
            <returns>Culture invariant upper case string</returns>
        </member>
        <member name="M:SysWeaver.StringExt.FastStartsWith(System.String,System.String)">
            <summary>
            A fast case sensitive, invariant culture starts with method
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringExt.FastStartsWith(System.String,System.String,System.Int32)">
            <summary>
            A fast case sensitive, invariant culture starts with method
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <param name="atOffset"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringExt.FastEndsWith(System.String,System.String)">
            <summary>
            A fast case sensitive, invariant culture ends with method
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringExt.FastEquals(System.String,System.String)">
            <summary>
            A fast case sensitive, invariant culture equals with method
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringExt.ExtractKeywords(System.String,System.Int32)">
            <summary>
            Extract keywords from a string (typically camelcased or filenames etc), ex:
            "HelloWorld42.txt" => "Hello", "World", "txt"
            "myBUNNY_isCool" => "my", "BUNNY", "is", "Cool" (if min len is 2)
            "MyFolder/Effects/CoolTorus.glsl" => "My", "Folder", "Effects", "Cool", "Torus", "glsl"
            </summary>
            <param name="str">The string to extract keywords from</param>
            <param name="minLen">The minimum length of a keyword</param>
            <returns>An enuerable with keywords</returns>
        </member>
        <member name="M:SysWeaver.StringExt.ExtractWordsAndNumbers(System.String)">
            <summary>
            Extract words and numbers, ex:
            "'Hello world' what's up in 1974?" => "Hello", "world", "what", "s", "up", "in", "1974"
            "The constant PI is approximated with 3.14, or?" => "The", "constant", "PI", "is", "approximated", "with", "3.14", "or"
            "An invalid number such as 12.22.21 should be separated" => "An", "invalid", "number", "such", "as", "12.22", "21", "should", "be", "separated"
            "The depth was 32.14." => "The", "depth", "was", "32.14"
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringExt.NullIfEmpty(System.String)">
            <summary>
            Return a null string if it's an empty string (or null)
            </summary>
            <param name="str">The string</param>
            <returns>null if the string is null or empty</returns>
        </member>
        <member name="M:SysWeaver.StringExt.JoinNonEmpty(System.String,System.String[])">
            <summary>
            Similar to String.Join but excludes all empty texts
            </summary>
            <param name="separator"></param>
            <param name="texts"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringExt.Interleave(System.String,System.String)">
            <summary>
            Interleaves the characters from two equally length strings.
            Ex: "abc", "123" => "a1b2c3".
            </summary>
            <param name="a">One string, ex: "abc"</param>
            <param name="b">Another string, ex: "123"</param>
            <returns>The interleaved result, ex: "a1b2c3"</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringTools.GetHashCode(System.String)">
            <summary>
            Compute a deterministic hash of the string contents
            </summary>
            <param name="s">The string to compute a hash for</param>
            <returns>A hash based on the string content</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToQuoted(System.String,System.Char)">
            <summary>
            Add quotation chars around a string. Ex: Test => "Test"
            </summary>
            <param name="s">The string to add quotation chars around</param>
            <param name="quotationChar">The quotation char to use</param>
            <returns>A quoted string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToQuoted(System.String,System.String)">
            <summary>
            Add quotation chars around a string. Ex: Test => "Test"
            </summary>
            <param name="s">The string to add quotation chars around</param>
            <param name="quotationChars">The quotation chars to use</param>
            <returns>A quoted string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToFilename(System.String)">
            <summary>
            Format a string as a filename, typically add quotes
            </summary>
            <param name="s">The string to format as a filename</param>
            <returns>A filename formatted string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToMail(System.String)">
            <summary>
            Format a string as a filename, typically add quotes
            </summary>
            <param name="s">The string to format as a filename</param>
            <returns>A filename formatted string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToFolder(System.String)">
            <summary>
            Format a string as a folder name, typically add quotes
            </summary>
            <param name="s">The string to format as a folder name</param>
            <returns>A folder name formatted string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.CountUp(System.String)">
            <summary>
            "Counts up" a string, ex "apa_1.png" => "apa_2.png", "apa9.txt" => "apa10.txt", "apa_1_99" => "apa_1_100", "apa" => "apa_1"
            </summary>
            <param name="str">The string to "count up"</param>
            <returns>A string that has been "incremented"</returns>
        </member>
        <member name="M:SysWeaver.StringTools.MakeFirstUppercase(System.String)">
            <summary>
            Make sure that the first character is an uppercase letter (if it's a letter).
            Examples:
            "hello" becomes "Hello".
            "World" remains "World".
            "123" remains "123".
            </summary>
            <param name="str">The text to make the first letter uppercased</param>
            <returns>The original string or a new string with the first letter uppercased</returns>
        </member>
        <member name="M:SysWeaver.StringTools.MakeFirstLowercase(System.String)">
            <summary>
            Make sure that the first character is a lowercase letter (if it's a letter).
            Examples:
            "Hello" becomes "hello".
            "world" remains "world".
            "123" remains "123".
            </summary>
            <param name="str">The text to make the first letter lowercased</param>
            <returns>The original string or a new string with the first letter lowercased</returns>
        </member>
        <member name="M:SysWeaver.StringTools.RemoveCamelCase(System.String,System.Char,System.Boolean)">
            <summary>
            Take a camel cased string and convert it to a space separated string. 
            Ex:
            "MyNameIsStupid" => "My name is stupid"
            </summary>
            <param name="str">The camel cased string. Ex: "MyNameIsStupid"</param>
            <param name="space">The character to use for space</param>
            <param name="keepFirstWordLetterCasing">If true, keep the casing of the first letter in each word</param>
            <returns>The space separated string. Ex: "My name is stupid"</returns>
        </member>
        <member name="M:SysWeaver.StringTools.Levenstein(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Levenstein distance
            </summary>
            <param name="source1">First string</param>
            <param name="source2">Second string</param>
            <param name="costLetter">Mismatched letter cost</param>
            <param name="costNumber">Mismatched number cost</param>
            <returns>The Levenstein distance between the two strings</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ExtractWords(System.String)">
            <summary>
            Extract all words from some text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTools.FuzzyMatch(System.String,System.String)">
            <summary>
            Levenstein distance, by considering each possible word pair of the text and match, the sum of best matches is returned
            </summary>
            <param name="text">First string</param>
            <param name="matchWith">Second string</param>
            <returns>The sum of the best levenstein distance between each word pair</returns>
        </member>
        <member name="M:SysWeaver.StringTools.IndexOf(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            Inspect each char and find the first match
            </summary>
            <param name="text">Text to search</param>
            <param name="isMatch">Predicate that inspects a char, return true to return this position</param>
            <param name="startIndex">Start position</param>
            <returns>Position of the first match, or -1 if none is found</returns>
        </member>
        <member name="M:SysWeaver.StringTools.EndOfWord(System.String,System.Int32)">
            <summary>
            Find the end of a word (first non letter or non digit)
            </summary>
            <param name="text">Text to search</param>
            <param name="startIndex">Start position</param>
            <returns>Position of the first match, or -1 if none is found</returns>
        </member>
        <member name="M:SysWeaver.StringTools.LimitLength(System.String,System.Int32,System.String)">
            <summary>
            Limit (clamps) a string to be within a max length
            </summary>
            <param name="s">The string to limit</param>
            <param name="maxLen">The maximum allowed length of the output string</param>
            <param name="elipses">If the string is cut short, end it with this string (only if max len is twice as long as this string)</param>
            <returns>A string that have at most max length chars</returns>
        </member>
        <member name="M:SysWeaver.StringTools.OnWordStart(System.String,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Find all word starts and execute a function on them
            </summary>
            <param name="text">The text to find word starts in</param>
            <param name="onNewWordStart">A function that is executed for every found word start, the paramater is the start index, return false to abort further processing</param>
            <param name="start">The optional first position in the string to search</param>
        </member>
        <member name="M:SysWeaver.StringTools.Sanitize(System.String,System.Collections.Generic.IReadOnlyDictionary{System.Char,System.String})">
            <summary>
            Clean up strings, removing duplicate white-spaces, turning all white spaces to ' ' (tab's etc).
            </summary>
            <param name="s"></param>
            <param name="charMap">An optional char remapper</param>
            <returns>A sanitized string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.CodeSanitize(System.String,System.Func{System.Char,System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.Char,System.String})">
            <summary>
            Clean up code strings, removing duplicate white-spaces, turning all white spaces to ' ' (tab's etc).
            Removing redunant spaces.
            </summary>
            <param name="s"></param>
            <param name="isCodeIdentifier">An optional function that returns true if a char is a possible identifier</param>
            <param name="charMap">An optional char remapper</param>
            <returns>A sanitized string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.IsAsciiOnly(System.String)">
            <summary>
            Check if a string contains anything but ascii (7-bit).
            If any char in the string have a value greater or equal to 128 this method returns false.
            </summary>
            <param name="s">The string to check</param>
            <returns>True if all chars in the string is less than 128</returns>
        </member>
        <member name="M:SysWeaver.StringTools.IsIdentifier(System.String)">
            <summary>
            Check if a string is a valid "identifier", only 'a'-'z' and numbers is accepeted (no number at the first position)
            </summary>
            <param name="s">The string to check</param>
            <returns>True if all chars in the string is valid</returns>
        </member>
        <member name="M:SysWeaver.StringTools.IsNumeric(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check if a string is numeric (only contains '0' to '9').
            </summary>
            <param name="s">The string to check</param>
            <param name="allowSpace">true to allow spaces (should filter them out before converting to a number)</param>
            <param name="allowNeg">true to allow a single '-' at the start</param>
            <param name="allowDecimal">true to allow a '.'</param>
            <returns>True if all chars in the string is a number</returns>
        </member>
        <member name="M:SysWeaver.StringTools.IsHex(System.String,System.Boolean)">
            <summary>
            Check if a string is made up of only hexadecimal digits (only contains '0' to '9', 'a' to 'f' or 'A' to 'F').
            </summary>
            <param name="s">The string to check</param>
            <param name="allowSpace">true to allow spaces (should filter them out before converting to a number)</param>
            <returns>True if all chars in the string is hexadecimal digits</returns>
        </member>
        <member name="M:SysWeaver.StringTools.IsLetters(System.String,System.Boolean)">
            <summary>
            Check if a string is letters only.
            </summary>
            <param name="s">The string to check</param>
            <param name="allowSpace">true to allow spaces</param>
            <returns>True if all chars in the string is a letter (or space if allowed)</returns>
        </member>
        <member name="M:SysWeaver.StringTools.RemoveMultiWhiteSpace(System.String,System.Char)">
            <summary>
            Removes duplicate white spaces, with a single white space (and trims white spaces from start and end).
            </summary>
            <param name="s">The string</param>
            <param name="useAsWhiteSpace">Replace white spaces with a single of this</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTools.RemoveGroup(System.String,System.Char,System.Char)">
            <summary>
            Remove some parantheses etc from a string
            </summary>
            <param name="s"></param>
            <param name="groupStart"></param>
            <param name="groupEnd"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast(System.String,System.String,System.String[])">
            <summary>
            Join strings using two separators, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The strings to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join strings using two separators, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The strings to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Join strings using two separators, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The strings to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast(System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Join strings using two separators, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The strings to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast``1(System.String,System.String,``0[])">
            <summary>
            Join strings using two separators into a string, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The objects to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Join strings using two separators into a string, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The objects to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.JoinWithSpecialLast``1(System.String,System.String,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Join objects using two separators into a string, one only used for the last separation.
            </summary>
            <param name="first">The first separators, used for all but the last</param>
            <param name="last">The last separator</param>
            <param name="args">The objects to join</param>
            <returns>The combined string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToHex(System.String)">
            <summary>
            Convert a string to only hex characters, useful for turning any text into something that is safe for url's, file names etc
            </summary>
            <param name="value">The string</param>
            <returns>null if the input value was null. String.Empty is the input value was empty, else the hex encoded string only '0' to '9' and 'a' to 'f' is returned</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToStringFromHex(System.String)">
            <summary>
            Convert a hexadecimal string to it's original string (reverses the ToHex operation).
            </summary>
            <param name="value"></param>
            <returns>null if the input value was null. String.Empty is the input value was empty, else the original string (reverse of the ToHex operation)</returns>
        </member>
        <member name="M:SysWeaver.StringTools.ToDataFromHex(System.String)">
            <summary>
            Convert a hexadecimal string to it's data representation
            </summary>
            <param name="value">A hexadecimal string, can only be null, empty or the characters '0' - '9', 'a' - 'f' or 'A' - 'F' (or it will throw)</param>
            <returns>null if input value is null, an empty array if input value is empty, else the binary data represented by the string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.AnyLetter(System.String)">
            <summary>
            Check if the string contains any letter
            </summary>
            <param name="value">The string to check</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTools.Filter(System.String,System.Collections.Generic.IReadOnlySet{System.Char})">
            <summary>
            Filter a string, just keeping the allowed chars
            </summary>
            <param name="value">The string to filter</param>
            <param name="keep">The chars to keep</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.Filter(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Filter a string, just keeping the allowed chars
            </summary>
            <param name="value">The string to filter</param>
            <param name="keepFn">A function that is called to determine if a char should be kept, return true to keep the char</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.Filter(System.String,System.Char,System.Char)">
            <summary>
            Filter a string, just keeping the allowed chars
            </summary>
            <param name="value">The string to filter</param>
            <param name="minInclusive">The first char in the range to keep</param>
            <param name="maxInclusive">The last char in the range to keep</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.FilterUInt(System.String)">
            <summary>
            Filter a string, just keeping numerical digits (for parsing an unsigned integer)
            </summary>
            <param name="value">The string to filter</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.FilterInt(System.String)">
            <summary>
            Filter a string, just keeping numerical digits and allowing a leading '-' (for parsing a signed integer)
            </summary>
            <param name="value">The string to filter</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.SplitFirst(System.String,System.Char,System.String@)">
            <summary>
            Split a string into two parts on the first occurance of a char.
            Example:
            var left = "name@example.com".SplitFirst('@', out var right);
            left = "name";
            right = "example.com";
            </summary>
            <param name="value">The value to split into two parts</param>
            <param name="split">The character to split</param>
            <param name="right">The right part, null if the split char isn't found</param>
            <returns>null if the value is null, else the left part (if the split char isn't found, the original string is returned)</returns>
        </member>
        <member name="M:SysWeaver.StringTools.SplitFirst(System.String,System.Char)">
            <summary>
            Split a string into two parts (keeping the left part) on the first occurance of a char.
            Example:
            "name@example.com".SplitFirst('@') => "name"
            </summary>
            <param name="value">The value to split into two parts</param>
            <param name="split">The character to split</param>
            <returns>null if the value is null, else the left part (if the split char isn't found, the original string is returned), semantically the same as value.Split(split)[0]</returns>
        </member>
        <member name="M:SysWeaver.StringTools.SecureEnd(System.String,System.Int32,System.String)">
            <summary>
            Make a string "secure" by only keeping a few chars "visible".
            Examples:
            "1234abcd5678".SecureEnd() => "1234********";
            "1234abcd5678".SecureEnd(4, "..") => "1234..";
            </summary>
            <param name="value">The value to "secure"</param>
            <param name="keep">The number of chars to keep, this is capped to at most half the number of chars in the input</param>
            <param name="suffix">An optional suffix to use instead of filling with *'s</param>
            <returns>The "secure" string</returns>
        </member>
        <member name="M:SysWeaver.StringTools.SecureStart(System.String,System.Int32,System.String)">
            <summary>
            Make a string "secure" by only keeping a few chars "visible".
            Examples:
            "1234abcd5678".SecureStart() => "********5678";
            "1234abcd5678".SecureStart(4, "..") => "..5678";
            </summary>
            <param name="value">The value to "secure"</param>
            <param name="keep">The number of chars to keep, this is capped to at most half the number of chars in the input</param>
            <param name="prefix">An optional prefix to use instead of filling with *'s</param>
            <returns>The "secure" string</returns>
        </member>
        <member name="T:SysWeaver.StringTree">
            <summary>
            A string tree stores a bunch of strings in a way that makes it fast to check if a test string starts with ANY of the contained strings.
            </summary>
        </member>
        <member name="P:SysWeaver.StringTree.IsCaseInSensitive">
            <summary>
            True if the tree is case in-sensitive
            </summary>
        </member>
        <member name="M:SysWeaver.StringTree.Build(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="strings">The strings to build a tree from, may not contain null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.StringTree.Add(System.String,System.Boolean,SysWeaver.StringTree)">
            <summary>
            Add a string to a new or existing tree
            </summary>
            <param name="text">The string to add, may not be null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree, if the tree already exists, the casing from that tree is used</param>
            <param name="parent">An existing tree</param>
            <returns>The new tree (or the existing)</returns>
        </member>
        <member name="M:SysWeaver.StringTree.TryAdd(SysWeaver.StringTree@,System.String,System.Boolean)">
            <summary>
            Try to add a string to a new or existing tree
            </summary>
            <param name="parent">An existing or new tree to update</param>
            <param name="text">The string to add, may not be null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree, if the tree already exists, the casing from that tree is used</param>
            <returns>True if the string was added, false if it already existed</returns>
        </member>
        <member name="M:SysWeaver.StringTree.StartsWithAny(System.String,System.Int32)">
            <summary>
            Find the longest string (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>The longest found match or null if no match is found</returns>
        </member>
        <member name="M:SysWeaver.StringTree.AllStartsWithAny(System.String,System.Int32)">
            <summary>
            Find all matching strings (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>A list of matches, orderer from shortest match to longest match</returns>
        </member>
        <member name="M:SysWeaver.StringTree.PrefixesOf(System.String,System.Int32)">
            <summary>
            Find all strings (in the tree), that is a prefix of the text
            </summary>
            <param name="text">The text to find prefixes (in the tree) for </param>
            <param name="start">An optional start offset</param>
            <returns>A list of matches, ordered by name</returns>
        </member>
        <member name="M:SysWeaver.StringTree.InternalAddAllInOrder(System.Collections.Generic.List{System.String},SysWeaver.StringTree)">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTree.InternalAddAll(System.Collections.Generic.List{System.String},SysWeaver.StringTree)">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTree.GetAll">
            <summary>
            Get all string contained in the string tree, in any order
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTree.GetAllInOrder">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTree.GetAllInReverseOrder">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTree.Clone">
            <summary>
            Make a copy of a tree
            </summary>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.StringTreeExt">
            <summary>
            Extension methods to StringTree instances
            </summary>
        </member>
        <member name="M:SysWeaver.StringTreeExt.IndexOfAny(SysWeaver.StringTree,System.String@,System.String,System.Int32)">
            <summary>
            Find the index of the first matching string (from the tree)
            </summary>
            <param name="tree">The tree to use</param>
            <param name="match">The first matching string (if found) or null</param>
            <param name="text">The text to find the first matching string in</param>
            <param name="start">An optional start offset</param>
            <returns>The position of the first matching string or -1 if no match is found</returns>
        </member>
        <member name="M:SysWeaver.StringTreeExt.LastIndexOfAny(SysWeaver.StringTree,System.String@,System.String,System.Int32)">
            <summary>
            Find the index of the last matching string (from the tree)
            </summary>
            <param name="tree">The tree to use</param>
            <param name="match">The last  matching string (if found) or null</param>
            <param name="text">The text to find the last  matching string in</param>
            <param name="start">An optional start offset, or -1 to start at the end of the string</param>
            <returns>The position of the last  matching string or -1 if no match is found</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList.Build``1(System.Collections.Generic.IEnumerable{System.Tuple{System.String,``0}},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="strings">The strings to build a tree from, may not contain null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList.Build``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="strings">The strings to build a tree from, may not contain null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList.Build``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="values">The values to add, may not contain null</param>
            <param name="getKey">Function that extracts the string key</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="T:SysWeaver.StringTreeListExt">
            <summary>
            Extension methods to StringTree instances
            </summary>
        </member>
        <member name="M:SysWeaver.StringTreeListExt.IndexOfAny``1(SysWeaver.StringTreeList{``0},System.Collections.Generic.IReadOnlyList{``0}@,System.String,System.Int32)">
            <summary>
            Find the index of the first matching string (from the tree)
            </summary>
            <param name="tree">The tree to use</param>
            <param name="match">The first matching string (if found) or null</param>
            <param name="text">The text to find the first matching string in</param>
            <param name="start">An optional start offset</param>
            <returns>The position of the first matching string or -1 if no match is found</returns>
        </member>
        <member name="M:SysWeaver.StringTreeListExt.LastIndexOfAny``1(SysWeaver.StringTreeList{``0},System.Collections.Generic.IReadOnlyList{``0}@,System.String,System.Int32)">
            <summary>
            Find the index of the last matching string (from the tree)
            </summary>
            <param name="tree">The tree to use</param>
            <param name="match">The last  matching string (if found) or null</param>
            <param name="text">The text to find the last  matching string in</param>
            <param name="start">An optional start offset, or -1 to start at the end of the string</param>
            <returns>The position of the last matching string or -1 if no match is found</returns>
        </member>
        <member name="T:SysWeaver.StringTreeList`1">
            <summary>
            A string tree stores a bunch of strings in a way that makes it fast to check if a test string starts with ANY of the contained strings.
            </summary>
        </member>
        <member name="P:SysWeaver.StringTreeList`1.IsCaseInSensitive">
            <summary>
            True if the tree is case in-sensitive
            </summary>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.Build(System.Collections.Generic.IEnumerable{System.Tuple{System.String,`0}},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="strings">The strings to build a tree from, may not contain null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.Build(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="strings">The strings to build a tree from, may not contain null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.Build(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String},System.Boolean)">
            <summary>
            Build a tree from a bunch of strings
            </summary>
            <param name="values">The values to add, may not contain null</param>
            <param name="getKey">Function that extracts the string key</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree</param>
            <returns>The tree</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.Add(System.String,`0,System.Boolean,SysWeaver.StringTreeList{`0})">
            <summary>
            Add a string to a new or existing tree
            </summary>
            <param name="text">The string to add, may not be null</param>
            <param name="value">The value associated with the string, may not be null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree, if the tree already exists, the casing from that tree is used</param>
            <param name="parent">An existing tree</param>
            <returns>The new tree (or the existing)</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.TryAdd(SysWeaver.StringTreeList{`0}@,System.String,`0,System.Boolean)">
            <summary>
            Try to add a string to a new or existing tree
            </summary>
            <param name="parent">An existing or new tree to update</param>
            <param name="text">The string to add, may not be null</param>
            <param name="value">The value associated with the string, may not be null</param>
            <param name="caseInSensitive">Set to true to make a case in-sensitive tree, if the tree already exists, the casing from that tree is used</param>
            <returns>True if the string was added, false if it already existed</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.StartsWithAny(System.String,System.Int32)">
            <summary>
            Find the longest string (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>The longest found match or null if no match is found</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.AllStartsWithAny(System.String,System.Int32)">
            <summary>
            Find all matching strings (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>A list of matches, ordered by name</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.PrefixesOf(System.String,System.Int32)">
            <summary>
            Find all matching strings (in the tree), that matches the text
            </summary>
            <param name="text">The text to match against the strings in the tree</param>
            <param name="start">An optional start offset</param>
            <returns>A list of matches, ordered by name</returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.InternalAddAllInOrder(System.Collections.Generic.List{System.Collections.Generic.List{`0}},SysWeaver.StringTreeList{`0})">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.InternalAddAll(System.Collections.Generic.List{System.Collections.Generic.List{`0}},SysWeaver.StringTreeList{`0})">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.GetAll">
            <summary>
            Get all string contained in the string tree, in any order
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.GetAllInOrder">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.GetAllInReverseOrder">
            <summary>
            Get all string contained in the string tree, ordered by key
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringTreeList`1.Clone">
            <summary>
            Make a copy of a tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.StringValidate.ComputerName(System.String)">
            <summary>
            Validate that the input is valid for a NetBIOS computer name (windows)
            </summary>
            <param name="name">The string to test</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.DnsName(System.String)">
            <summary>
            Validate that the input is valid for a DNS domain name 
            </summary>
            <param name="name">The string to test</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.IpV4(System.String)">
            <summary>
            Validate that the input is valid for an IPv4 address
            </summary>
            <param name="name">The string to test</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.IpV6(System.String)">
            <summary>
            Validate that the input is valid for an IPv6 address
            </summary>
            <param name="name">The string to test</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.DomainName(System.String)">
            <summary>
            Validate that the input is valid for a Domain name (IPv4, IPv6 address, DNS or Computer name).
            </summary>
            <param name="name">The string to test</param>
            <returns>The type of domain</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.Email(System.String)">
            <summary>
            Validate that the input is valid for an email (name@domainname)
            </summary>
            <param name="email">The string to test</param>
            <returns>The type of domain</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.Numeric(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Validate that a string only contains numeric and optionally is within some interval
            </summary>
            <param name="s">The string to test</param>
            <param name="errPrefix">A prefix to add to any exception texts</param>
            <param name="min">An optional minimum allowed value</param>
            <param name="max">An optional maximum allowed value</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.StringValidate.Hex(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Validate that a string only contains numeric and optionally is within some interval
            </summary>
            <param name="s">The string to test</param>
            <param name="errPrefix">A prefix to add to any exception texts</param>
            <param name="min">An optional minimum allowed value</param>
            <param name="max">An optional maximum allowed value</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SysWeaver.SystemHelper.GetCommandAndArgs(System.String@,System.String)">
            <summary>
            Split a command line string to the program name and arguments
            </summary>
            <param name="args">The parsed arguments, ex "test.txt"</param>
            <param name="commandLine">The input command line, ex "notepad test.txt"</param>
            <returns>The parsed command, ex: "notepad"</returns>
        </member>
        <member name="M:SysWeaver.SystemHelper.GetStdOutFrom(System.String)">
            <summary>
            Executes a command line and returns all text from stdout
            </summary>
            <param name="commandline">The command line, ex "dir *.dll /b"</param>
            <returns>The text outputted to stdout from the executed program or null if it failed to start</returns>
        </member>
        <member name="M:SysWeaver.SystemHelper.GetStdOutFrom(System.Int32@,System.String)">
            <summary>
            Executes a command line and returns all text from stdout
            </summary>
            <param name="exitCode">The exit code of the process or -1 if it failed to start</param>
            <param name="commandline">The command line, ex "dir *.dll /b"</param>
            <returns>The text outputted to stdout from the executed program or null if it failed to start</returns>
        </member>
        <member name="M:SysWeaver.SystemHelper.Run(System.String)">
            <summary>
            Executes a command line and returns the exit code
            </summary>
            <param name="commandline">The command line, ex "dir *.dll /b"</param>
            <returns>The exit code, any exception will return -404 as an exit code</returns>
        </member>
        <member name="M:SysWeaver.SysWeaverLogo.Draw(System.ConsoleColor,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Draw the logo to the console with specific colors, use default to draw using the default color scheme
            </summary>
        </member>
        <member name="F:SysWeaver.TaskExt.CompValTask">
            <summary>
            A completed value task
            </summary>
        </member>
        <member name="M:SysWeaver.TaskExt.StartNewAsyncChain(System.Func{System.Runtime.CompilerServices.ConfiguredTaskAwaitable})">
            <summary>
            Start a new async task (new thread / new chain)
            </summary>
            <param name="task">A function that creates the new task, and then returns the result of ConfigureAwait(false) on it</param>
        </member>
        <member name="M:SysWeaver.TaskExt.StartNewAsyncChain(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Start a new async task (new thread / new chain)
            </summary>
            <param name="task">A function that creates the new task, and then returns the result of ConfigureAwait(false) on it</param>
        </member>
        <member name="M:SysWeaver.TaskExt.RunAsync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Run a task in a new thread / chain, then wait for the task to complete and return it's value
            </summary>
            <typeparam name="T">Return value type</typeparam>
            <param name="t">The task to run</param>
            <returns>The return value of the task</returns>
        </member>
        <member name="M:SysWeaver.TaskExt.RunAsync(System.Threading.Tasks.Task)">
            <summary>
            Run a task in a new thread / chain, then wait for the task to complete
            </summary>
            <param name="t">The task to run</param>
        </member>
        <member name="F:SysWeaver.TaskExt.NullStringTask">
            <summary>
            A complete task for a null string
            </summary>
        </member>
        <member name="F:SysWeaver.TaskExt.EmptyStringTask">
            <summary>
            A complete task for a null string
            </summary>
        </member>
        <member name="F:SysWeaver.TaskExt.TrueTask">
            <summary>
            A complete task for a True boolean
            </summary>
        </member>
        <member name="F:SysWeaver.TaskExt.FalseTask">
            <summary>
            A complete task for a True boolean
            </summary>
        </member>
        <member name="M:SysWeaver.TaskExt.RandomDelay(System.Int32,System.Int32)">
            <summary>
            Task that delays a small random amount
            </summary>
            <param name="min">Minimum delay in ms</param>
            <param name="mask">Bitmask for the delay to add: delay = min + (RandomByte &amp; mask)</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TaskExt.RunDelayed(System.Action,System.Int32)">
            <summary>
            Run a function after some fixed duration
            </summary>
            <param name="func">The function to execute</param>
            <param name="delayInMs">The delay in milli seconds</param>
        </member>
        <member name="M:SysWeaver.TaskExt.RunDelayed(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Execute a task after some fixed duration
            </summary>
            <param name="task">The task to execute</param>
            <param name="delayInMs">The delay in milli seconds</param>
        </member>
        <member name="M:SysWeaver.TaskExt.WhenAllDebug(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Like Task.WhenAll but running in serial (for debugging)
            </summary>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.TernaryTree`1">
            <summary>
            Creates an instance of terenary search tree.
            </summary>
            <typeparam name="T">Value</typeparam>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.N">
            <summary>
            The size of tree.
            </summary>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.root">
            <summary>
            The root
            </summary>
        </member>
        <member name="T:SysWeaver.TernaryTree`1.Node">
            <summary>
            Node instance.
            </summary>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.Node.c">
            <summary>
            character
            </summary>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.Node.left">
            <summary>
            The  left, middle, and right subtries.
            </summary>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.Node.mid">
            <summary>
            The  left, middle, and right subtries.
            </summary>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.Node.right">
            <summary>
            The  left, middle, and right subtries.
            </summary>
        </member>
        <member name="F:SysWeaver.TernaryTree`1.Node.value">
            <summary>
            The value associated .
            </summary>
        </member>
        <member name="P:SysWeaver.TernaryTree`1.Length">
            <summary>
            Gets the number of keys in tree.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Contains(System.String)">
            <summary>
            Determines whether the tree [contains] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the tree [contains] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SysWeaver.TernaryTree`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:SysWeaver.TernaryTree`1.Node"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:SysWeaver.TernaryTree`1.Node"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Get(SysWeaver.TernaryTree{`0}.Node,System.String,System.Int32)">
            <summary>
            Gets the specified x.
            </summary>
            <param name="node">The x.</param>
            <param name="key">The key.</param>
            <param name="charIndex">The d.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.GetFirstWithValue(SysWeaver.TernaryTree{`0}.Node,System.String,System.Int32)">
            <summary>
            Gets the specified x.
            </summary>
            <param name="node">The x.</param>
            <param name="key">The key.</param>
            <param name="charIndex">The d.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Add(SysWeaver.TernaryTree{`0}.Node,System.String,`0,System.Int32)">
            <summary>
            Adds the specified node in the tree.
            </summary>
            <param name="node">The Node.</param>
            <param name="key">The key.</param>
            <param name="value">The val.</param>
            <param name="charIndex">The d.</param>
            <returns></returns>
        </member>
        <member name="P:SysWeaver.TernaryTree`1.Keys">
            <summary>
            Returns all keys in tree.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.PrefixMatch(System.String)">
            <summary>
            Returns all keys starting with a given prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Collect(SysWeaver.TernaryTree{`0}.Node,System.String,System.Collections.Generic.Queue{System.String})">
            <summary>
            Collects all keys in subtrie rooted at x with given prefix.
            </summary>
            <param name="node">The x.</param>
            <param name="prefix">The prefix.</param>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.WildcardMatch(System.String)">
            <summary>
            Returns all keys matching given wilcard pattern.
            </summary>
            <param name="pat">The pat.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Collect(SysWeaver.TernaryTree{`0}.Node,System.String,System.Int32,System.String,System.Collections.Generic.Queue{System.String})">
            <summary>
            Collects all nodes for the specified prefix pattern.
            </summary>
            <param name="node">The Node.</param>
            <param name="prefix">The prefix.</param>
            <param name="charIndex">The index of char.</param>
            <param name="pattern">The pattern.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Search(System.String)">
            <summary>
            Searches  all vals of keys starting with given prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.TryFindStart(`0@,System.String)">
            <summary>
            Searches all vals of keys starting with given prefix.
            </summary>
            <param name="val">The found value.</param>
            <param name="value">The start of the string</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Collect(SysWeaver.TernaryTree{`0}.Node,System.String,System.Collections.Generic.Queue{`0})">
            <summary>
            Collects all values of keys in subtrie rooted at x with given prefix.
            </summary>
            <param name="node">The x.</param>
            <param name="prefix">The prefix.</param>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.NearSearch(System.String,System.Int32)">
            <summary>
            Returns all values for keys in the dictionary that are within a given Hamming distance of a query.
            </summary>
            <param name="query">The query.</param>
            <param name="distance">Hamming distance.</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.TernaryTree`1.Collect(System.String,SysWeaver.TernaryTree{`0}.Node,System.Collections.Generic.Queue{`0},System.Int32)">
            <summary>
            Collects all values of keys which are within a given Hamming Distance.
            </summary>
            <param name="query">The query.</param>
            <param name="node">The node.</param>
            <param name="queue">The queue.</param>
            <param name="d">The d.</param>
        </member>
        <member name="T:SysWeaver.TextMessageHandler">
            <summary>
            Abstract Message handler that generates text only output
            </summary>
        </member>
        <member name="T:SysWeaver.TextTemplate">
            <summary>
            Creates a text template, that can be used to replace variable (or any string) in a text quickly.
            Variables can either be known up front by supplying a set or dictionary, or be defined by a start and end token.
            Variable values can be transformed by prepending the variable name with one of the following:
              _ = Make lower case, ex: "hello world!".
              ^ = Make upper case, ex: "HELLO WORLD!".
              @ = Make html attribute safe (HttpUtility.HtmlAttributeEncode), ex: "Hello world!".
              # = Make html value safe (HttpUtility.HtmlEncode), ex: "Hello world!".
              % = Make URL safe (HttpUtility.UrlEncode), ex: "Hello+world!".
              $ = Make javascript string safe (HttpUtility.JavaScriptStringEncode), ex: "Hello world!".
              £ = Make javascript string safe with quotes (HttpUtility.JavaScriptStringEncode), ex: var x = $(£Var); => var x = "Hello world!".
              ¤ = Make javascript string safe with quotes of html content (HttpUtility.JavaScriptStringEncode(HttpUtility.HtmlEncode()), ex: var x = $(¤Var); => var x = "12 &lt; 42".
              * = Make file/path safe (PathExt.SafeFilename), ex: "C:\Apa" => "C__Apa".
            Only one of _ , ^ and ~ may be used.
            Only one of @, #, %, $, £, ¤ and * may be used.
            _ , ^ and ~ can be combined with one of @, #, %, $ and *, ex: _#, ^$
            </summary>
        </member>
        <member name="M:SysWeaver.TextTemplate.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a text template where variables have a start and end token
            </summary>
            <param name="text">The original text</param>
            <param name="varBegin">Variable begin with this</param>
            <param name="varEnd">Variables end with this</param>
            <param name="caseInSensitive">If true, the variable is case insensitive</param>
            <param name="allowTransforms">If true, the variable can be transformed according to:
            $(Var) = Variable, ex: "Hello world!".
            $(_Var) = Make lower case, ex: "hello world!".
            $(^Var) = Make upper case, ex: "HELLO WORLD!".
            $(~Var) = Remove camel case, ex: "MyCoolType" => "My cool type".
            $(@Var) = Make html attribute safe (HttpUtility.HtmlAttributeEncode), ex: "Hello world!".
            $(#Var) = Make html value safe (HttpUtility.HtmlEncode), ex: "Hello world!".
            $(%Var) = Make URL safe (HttpUtility.UrlEncode), ex: "Hello+world!".
            $($Var) = Make javascript string safe (HttpUtility.JavaScriptStringEncode ), ex: "Hello world!".
            $(£Var) = Make javascript string safe with quotes (HttpUtility.JavaScriptStringEncode), ex: var x = $(£Var); => var x = "Hello world!".
            $(¤Var) = Make javascript string safe with quotes of html content (HttpUtility.JavaScriptStringEncode(HttpUtility.HtmlEncode()), ex: var x = $(¤Var); => var x = "12 &lt; 42".
            $(*Var) = Make file/path safe (PathExt.SafeFilename), ex: "C:\Apa" => "C__Apa".
            Only one of _ , ^ and ~ may be used.
            Only one of @, #, %, $, £, ¤ and * may be used.
            _ , ^ and ~ can be combined with one of @, #, %, $ and *, ex: $(_#Var)
            </param>/// 
        </member>
        <member name="M:SysWeaver.TextTemplate.#ctor(System.String,System.Collections.Generic.IReadOnlySet{System.String},System.Boolean,System.Boolean)">
            <summary>
            Create a text template where the specified values can be replaced
            </summary>
            <param name="text">The original text</param>
            <param name="replace">A set of strings that can be replaced</param>
            <param name="caseInSensitive">If true, the variable is case insensitive</param>
            <param name="allowTransforms">If true, the variable can be transformed according to:
            [Var] = Variable, ex: "Hello world!".
            [_Var] = Make lower case, ex: "hello world!".
            [^Var] = Make upper case, ex: "HELLO WORLD!".
            [~Var] = Remove camel case, ex: "MyCoolType" => "My cool type".
            [@Var] = Make html attribute safe (HttpUtility.HtmlAttributeEncode), ex: "Hello world!".
            [#Var] = Make html value safe (HttpUtility.HtmlEncode), ex: "Hello world!".
            [%Var] = Make URL safe (HttpUtility.UrlEncode), ex: "Hello+world!".
            [$Var] = Make javascript string safe (HttpUtility.JavaScriptStringEncode ), ex: "Hello world!".
            [£Var] = Make javascript string safe with quotes (HttpUtility.JavaScriptStringEncode), ex: var x = [£Var]; => var x = "Hello world!".
            [¤Var] = Make javascript string safe with quotes of html content (HttpUtility.JavaScriptStringEncode(HttpUtility.HtmlEncode()), ex: var x = [¤Var]; => var x = "12 &lt; 42".
            [*Var] = Make file/path safe (PathExt.SafeFilename), ex: "C:\Apa" => "C__Apa".
            Only one of _ , ^ and ~ may be used.
            Only one of @, #, %, $, £, ¤ and * may be used.
            _ , ^ and ~ can be combined with one of @, #, %, $ and *, ex: [_#Var]
            </param>
        </member>
        <member name="M:SysWeaver.TextTemplate.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Create a text template where the specified values can be replaced
            </summary>
            <param name="text">The original text</param>
            <param name="varsWithDefaults">A dictionary with the values that can be replaced and their specified defaults</param>
            <param name="caseInSensitive">If true, the variable is case insensitive</param>
            <param name="allowTransforms">If true, the variable can be transformed according to:
            [Var] = Variable, ex: "Hello world!".
            [_Var] = Make lower case, ex: "hello world!".
            [^Var] = Make upper case, ex: "HELLO WORLD!".
            [~Var] = Remove camel case, ex: "MyCoolType" => "My cool type".
            [@Var] = Make html attribute safe (HttpUtility.HtmlAttributeEncode), ex: "Hello world!".
            [#Var] = Make html value safe (HttpUtility.HtmlEncode), ex: "Hello world!".
            [%Var] = Make URL safe (HttpUtility.UrlEncode), ex: "Hello+world!".
            [$Var] = Make javascript string safe (HttpUtility.JavaScriptStringEncode ), ex: "Hello world!".
            [£Var] = Make javascript string safe with quotes (HttpUtility.JavaScriptStringEncode), ex: var x = [£Var]; => var x = "Hello world!".
            [¤Var] = Make javascript string safe with quotes of html content (HttpUtility.JavaScriptStringEncode(HttpUtility.HtmlEncode()), ex: var x = [¤Var]; => var x = "12 &lt; 42".
            [*Var] = Make file/path safe (PathExt.SafeFilename), ex: "C:\Apa" => "C__Apa".
            Only one of _ , ^ and ~ may be used.
            Only one of @, #, %, $, £, ¤ and * may be used.
            _ , ^ and ~ can be combined with one of @, #, %, $ and *, ex: [_#Var]
            </param>
        </member>
        <member name="M:SysWeaver.TextTemplate.Get(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Get a string from the template with the specified replacements
            </summary>
            <param name="vars">A dictionary containing the variables to replace and the value to replace it with</param>
            <returns>A string with the specified replacements done</returns>
        </member>
        <member name="M:SysWeaver.TextTemplate.Get(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}[])">
            <summary>
            Get a string from the template with the specified replacements
            </summary>
            <param name="first">A dictionary containing the variables to replace and the value to replace it with</param>
            <param name="second">If the variable isn't found in the first dictionary, try with this</param>
            <param name="rest">If the variable isn't found in the second dictionary, try these in order</param>
            <returns>A string with the specified replacements done</returns>
        </member>
        <member name="M:SysWeaver.TextTemplate.Get(System.Func{System.String,System.String})">
            <summary>
            Get a string from the template with the specified replacements
            </summary>
            <param name="getVars">A function that returns the value for the given key, if not found return null</param>
            <returns>A string with the specified replacements done</returns>
        </member>
        <member name="F:SysWeaver.TextTemplate.Template">
            <summary>
            The original template text
            </summary>
        </member>
        <member name="P:SysWeaver.TextTemplate.Vars">
            <summary>
            All variables found/used in the text
            </summary>
        </member>
        <member name="P:SysWeaver.TextTemplate.HaveVars">
            <summary>
            True if the text contains variables
            </summary>
        </member>
        <member name="M:SysWeaver.TextTemplate.SearchAndReplace(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Replaces a bunch of key value pairs in a text
            </summary>
            <param name="text">The text to replace data in</param>
            <param name="values">A key value dictionary with replacements to be made</param>
            <param name="caseInSensitive">true to make the search case insensitive</param>
            <param name="allowTransforms">If true, the variable can be transformed according to:
            [Var] = Variable, ex: "Hello world!".
            [_Var] = Make lower case, ex: "hello world!".
            [^Var] = Make upper case, ex: "HELLO WORLD!".
            [~Var] = Remove camel case, ex: "MyCoolType" => "My cool type".
            [@Var] = Make html attribute safe (HttpUtility.HtmlAttributeEncode), ex: "Hello world!".
            [#Var] = Make html value safe (HttpUtility.HtmlEncode), ex: "Hello world!".
            [%Var] = Make URL safe (HttpUtility.UrlEncode), ex: "Hello+world!".
            [$Var] = Make javascript string safe (HttpUtility.JavaScriptStringEncode), ex: "Hello world!".
            [£Var] = Make javascript string safe with quotes (HttpUtility.JavaScriptStringEncode), ex: var x = [£Var]; => var x = "Hello world!".
            [¤Var] = Make javascript string safe with quotes of html content (HttpUtility.JavaScriptStringEncode(HttpUtility.HtmlEncode()), ex: var x = [¤Var]; => var x = "12 &lt; 42".
            [*Var] = Make file/path safe (PathExt.SafeFilename), ex: "C:\Apa" => "C__Apa".
            Only one of _ , ^ and ~ may be used.
            Only one of @, #, %, $, £, ¤ and * may be used.
            _ , ^ and ~ can be combined with one of @, #, %, $ and *, ex: [_#Var]
            </param>
            <returns>The text with all replacements made</returns>
        </member>
        <member name="M:SysWeaver.TextTemplate.SearchAndReplaceVars(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Replaces a bunch of key value pairs in a text
            </summary>
            <param name="text">The text to replace data in</param>
            <param name="varBegin">Variable begin with this</param>
            <param name="varEnd">Variables end with this</param>
            <param name="values">A key value dictionary with replacements to be made</param>
            <param name="caseInSensitive">true to make the search case insensitive</param>
            <param name="allowTransforms">If true, the variable can be transformed according to:
            [Var] = Variable, ex: "Hello world!".
            [_Var] = Make lower case, ex: "hello world!".
            [^Var] = Make upper case, ex: "HELLO WORLD!".
            [~Var] = Remove camel case, ex: "MyCoolType" => "My cool type".
            [@Var] = Make html attribute safe (HttpUtility.HtmlAttributeEncode), ex: "Hello world!".
            [#Var] = Make html value safe (HttpUtility.HtmlEncode), ex: "Hello world!".
            [%Var] = Make URL safe (HttpUtility.UrlEncode), ex: "Hello+world!".
            [$Var] = Make javascript string safe (HttpUtility.JavaScriptStringEncode), ex: "Hello world!".
            [£Var] = Make javascript string safe with quotes (HttpUtility.JavaScriptStringEncode), ex: var x = [£Var]; => var x = "Hello world!".
            [¤Var] = Make javascript string safe with quotes of html content (HttpUtility.JavaScriptStringEncode(HttpUtility.HtmlEncode()), ex: var x = [¤Var]; => var x = "12 &lt; 42".
            [*Var] = Make file/path safe (PathExt.SafeFilename), ex: "C:\Apa" => "C__Apa".
            Only one of _ , ^ and ~ may be used.
            Only one of @, #, %, $, £, ¤ and * may be used.
            _ , ^ and ~ can be combined with one of @, #, %, $ and *, ex: [_#Var]
            </param>
            <returns>The text with all replacements made</returns>
        </member>
        <member name="T:SysWeaver.TorService">
            <summary>
            Check and exposes the SysWeaver.Tor services (if available)
            </summary>
        </member>
        <member name="F:SysWeaver.TorService.IsAvailable">
            <summary>
            True if the tor tools are avialble
            </summary>
        </member>
        <member name="F:SysWeaver.TorService.CreateTorClient">
            <summary>
            Create a tor client (will return null if Tor tools isn't available)
            </summary>
        </member>
        <member name="F:SysWeaver.TorService.Proxy">
            <summary>
            The proxy to use to route through tor
            </summary>
        </member>
        <member name="T:SysWeaver.AutoTranslateAttribute">
            <summary>
            Put this attribute on a member to allow it to be automatically translated when returned in an API call (if auto-translation is enabled etc).
            By default the translation context will be created using the code summary of the member.
            </summary>
        </member>
        <member name="M:SysWeaver.AutoTranslateAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Put this attribute on a member to allow it to be automatically translated when returned in an API call (if auto-translation is enabled etc).
            </summary>
            <param name="fromLanguage">The source language (ISO code) if not english</param>
            <param name="contextFromDesc">If true, the code summary of the member will be included in the context</param>
        </member>
        <member name="M:SysWeaver.AutoTranslateAttribute.#ctor(System.Boolean)">
            <summary>
            Put this attribute on a member to allow it to be automatically translated when returned in an API call (if auto-translation is enabled etc).
            </summary>
            <param name="contextFromDesc">If true, the code summary of the member will be included in the context</param>
        </member>
        <member name="T:SysWeaver.AutoTranslateContextAttribute">
            <summary>
            Put this attribute on an auto translated member to add additional context when auto translating this member.
            </summary>
        </member>
        <member name="M:SysWeaver.AutoTranslateContextAttribute.#ctor(System.String,System.String[])">
            <summary>
            Put this attribute on an auto translated member to add additional context when auto translating this member.
            </summary>
            <param name="contextText">The additional context to add when auto translating this member.
            Then final text will use String.Format(contextText, ...);
            ... = The values of the members passed in as arguments.</param>
            <param name="memberNames">List of type members who's values will be passed in as arguments
            If any member value is null or empty, the whole context string is ignored.
            </param>
        </member>
        <member name="T:SysWeaver.AutoTranslateTypeAttribute">
            <summary>
            Put this attribute on a member to indicate that the text is of a specfic type that needs to be handles differently.
            </summary>
        </member>
        <member name="M:SysWeaver.AutoTranslateTypeAttribute.#ctor(SysWeaver.Translation.TranslatorTypes)">
            <summary>
            Put this attribute on a member to indicate that the text is of a specfic type that needs to be handles differently.
            </summary>
            <param name="type">The type of text that this member should be treated as</param>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.Translate(SysWeaver.Translation.TranslateRequest)">
            <summary>
            Translate some text to one or more languages
            </summary>
            <param name="request">Paramaters</param>
            <returns>Translations in the same order as specified in the parameters</returns>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.TranslateMultiple(SysWeaver.Translation.TranslateMultipleRequest)">
            <summary>
            Translate multiple texts to one or more languages
            </summary>
            <param name="request">Paramaters</param>
            <returns>Translations in the same order as specified in the parameters</returns>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.TranslateOne(SysWeaver.Translation.TranslateRequest)">
            <summary>
            Translate some text to a new language
            </summary>
            <param name="request">Paramaters</param>
            <returns>Translated text</returns>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.GetSupportedSourceLanguages">
            <summary>
            Return a list of supported source languages
            </summary>
            <returns>A list of supported source languages</returns>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.GetSupportedTargetLanguages">
            <summary>
            Return a list of supported target languages
            </summary>
            <returns>A list of supported target languages</returns>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.CanFrom(System.String)">
            <summary>
            Returns a formatted from language if it's valid, else null
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Translation.ITranslator.CanTo(System.String)">
            <summary>
            Returns a formatted to language if it's valid, else null
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.Translate(System.String,System.String,System.String,System.String)">
            <summary>
            Translate some text to one or more languages
            </summary>
            <param name="text">The text to translate</param>
            <param name="to">The two letter ISO-639-1 language code of the target language (with an optional two letter ISO-3166-a2 country code appended with a hyphen, ex: "zw-CH").
            Multiple targets can be set by using a comma separation.</param>
            <param name="from">The two letter ISO-639-1 language code of the source language (the supplied text).
            "*" can be used to let the translator identify the source language.</param>
            <param name="context">An optional context that describes in what situation this text is being used</param>
            <returns>Translations in the same order as specified in the parameters</returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.TranslateMultiple(System.String[],System.String,System.String,System.String)">
            <summary>
            Translate multiple texts to one or more languages
            </summary>
            <param name="texts">The texts to translate</param>
            <param name="to">The two letter ISO-639-1 language code of the target language (with an optional two letter ISO-3166-a2 country code appended with a hyphen, ex: "zw-CH").
            Multiple targets can be set by using a comma separation.</param>
            <param name="from">The two letter ISO-639-1 language code of the source language (the supplied text).
            "*" can be used to let the translator identify the source language.</param>
            <param name="context">An optional context that describes in what situation that the texts are being used</param>
            <returns>Translations in the same order as specified in the parameters</returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.TranslateOne(System.String,System.String,System.String,System.String)">
            <summary>
            Translate some text to a new language
            </summary>
            <param name="text">The text to translate</param>
            <param name="to">The two letter ISO-639-1 language code of the target language (with an optional two letter ISO-3166-a2 country code appended with a hyphen, ex: "zw-CH").</param>
            <param name="from">The two letter ISO-639-1 language code of the source language (the supplied text).
            "*" can be used to let the translator identify the source language.</param>
            <param name="context">An optional context that describes in what situation this text is being used</param>
            <returns>Translated text</returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.RequestOne(System.String,System.String,System.String,System.String)">
            <summary>
            Perform a request bypassing any caches, you probably shouldn't use this!
            </summary>
            <param name="from">The two letter ISO-639-1 language code of the source language (the supplied text).
            "*" can be used to let the translator identify the source language.</param>
            <param name="to">The two letter ISO-639-1 language code of the target language (with an optional two letter ISO-3166-a2 country code appended with a hyphen, ex: "zw-CH").</param>
            <param name="text">The text to translate</param>
            <param name="context">An optional context that describes in what situation this text is being used</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.SupportedSourceLanguages">
            <summary>
            Return a list of supported source languages
            </summary>
            <returns>A list of supported source languages</returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.SupportedTargetLanguages">
            <summary>
            Return a list of supported target languages
            </summary>
            <returns>A list of supported target languages</returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.CanTranslateFrom(System.String)">
            <summary>
            Returns a formatted from language if it's valid, else null
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.Translation.IInternalTranslator.CanTranslateTo(System.String)">
            <summary>
            Returns a formatted to language if it's valid, else null
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:SysWeaver.Translation.TranslateMultipleRequest">
            <summary>
            Translates multiple texts
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateMultipleRequest.From">
            <summary>
            The two letter ISO-639-1 language code of the source language (the supplied text).
            "*" can be used to let the translator identify the source language.
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateMultipleRequest.To">
            <summary>
            The two letter ISO-639-1 language code of the target language (with an optional two letter ISO-3166-a2 country code appended with a hyphen, ex: "zw-CH").
            Multiple targets can be set by using a comma separation (not possible for the *One methods).
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateMultipleRequest.Texts">
            <summary>
            The texts to translate.
            If any text is starting with "{MD}" that text is assumed to be in the Mark Down format (and returned as such).
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateMultipleRequest.Context">
            <summary>
            An optional context that describes in what situation the texts are being used
            </summary>
        </member>
        <member name="T:SysWeaver.Translation.TranslateRequest">
            <summary>
            Translates a single text 
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateRequest.From">
            <summary>
            The two letter ISO-639-1 language code of the source language (the supplied text).
            "*" can be used to let the translator identify the source language.
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateRequest.To">
            <summary>
            The two letter ISO-639-1 language code of the target language (with an optional two letter ISO-3166-a2 country code appended with a hyphen, ex: "zw-CH").
            Multiple targets can be set by using a comma separation (not possible for the *One methods).
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateRequest.Text">
            <summary>
            The text to translate.
            If it's starting with "{MD}" the text is assumed to be in the Mark Down format.
            </summary>
        </member>
        <member name="P:SysWeaver.Translation.TranslateRequest.Context">
            <summary>
            An optional context that describes in what situation this text is being used
            </summary>
        </member>
        <member name="T:SysWeaver.TypeExtensions">
            <summary>
            Add some extension methods to the reflection types
            </summary>
        </member>
        <member name="M:SysWeaver.TypeExtensions.AllFields(System.Reflection.TypeInfo)">
            <summary>
            Enumerates all fields of this type, including inherited fields
            </summary>
            <param name="ti">The type of interest</param>
            <returns>All fields</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.AllMethods(System.Reflection.TypeInfo)">
            <summary>
            Enumerates all methods of this type, including inherited methods
            </summary>
            <param name="ti">The type of interest</param>
            <returns>All methods</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.AllProperties(System.Reflection.TypeInfo)">
            <summary>
            Enumerates all properties of this type, including inherited properties
            </summary>
            <param name="ti">The type of interest</param>
            <returns>All properties</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.Flags(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves some reflection flags (properties) of a propery
            </summary>
            <param name="i">The property of interest</param>
            <returns>The reflection flags for the supplied property</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.Flags(System.Reflection.MethodInfo)">
            <summary>
            Retrieves some reflection flags (properties) of a method
            </summary>
            <param name="gm">The method of interest</param>
            <returns>The reflection flags for the supplied method</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.Flags(System.Reflection.FieldInfo)">
            <summary>
            Retrieves some reflection flags (properties) of a field
            </summary>
            <param name="gm">The field of interest</param>
            <returns>The reflection flags for the supplied field</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.FindProperties(System.Reflection.TypeInfo,SysWeaver.ReflectionFlags,SysWeaver.ReflectionFlags)">
            <summary>
            Enumerates all properties of a type that have some specific flags (properties)
            </summary>
            <param name="ti">The type of interest</param>
            <param name="mustHave">The reflection flags (properties) that the property must have</param>
            <param name="mayNotHave">The reflection flags (properties) that the property may not have</param>
            <returns>All matching properties</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.FindMethods(System.Reflection.TypeInfo,SysWeaver.ReflectionFlags,SysWeaver.ReflectionFlags)">
            <summary>
            Enumerates all methods of a type that have some specific flags (properties)
            </summary>
            <param name="ti">The type of interest</param>
            <param name="mustHave">The reflection flags (properties) that the method must have</param>
            <param name="mayNotHave">The reflection flags (properties) that the method may not have</param>
            <returns>All matching methods</returns>
        </member>
        <member name="M:SysWeaver.TypeExtensions.FindFields(System.Reflection.TypeInfo,SysWeaver.ReflectionFlags,SysWeaver.ReflectionFlags)">
            <summary>
            Enumerates all fields of a type that have some specific flags (properties)
            </summary>
            <param name="ti">The type of interest</param>
            <param name="mustHave">The reflection flags (properties) that the field must have</param>
            <param name="mayNotHave">The reflection flags (properties) that the field may not have</param>
            <returns>All matching fields</returns>
        </member>
        <member name="T:SysWeaver.ReflectionFlags">
            <summary>
            A collection of flags that describe some reflection properties
            </summary>
        </member>
        <member name="F:SysWeaver.ReflectionFlags.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:SysWeaver.ReflectionFlags.IsStatic">
            <summary>
            The reflected item is static, else instance
            </summary>
        </member>
        <member name="F:SysWeaver.ReflectionFlags.IsPublic">
            <summary>
            The reflected item is public, else private / protected / internal etc
            </summary>
        </member>
        <member name="F:SysWeaver.ReflectionFlags.IsDeclared">
            <summary>
            The reflected item is declared in the specified type, else it's declared in one of the inherited types
            </summary>
        </member>
        <member name="F:SysWeaver.ReflectionFlags.All">
            <summary>
            All reflection types combined
            </summary>
        </member>
        <member name="T:SysWeaver.TypeFinder">
            <summary>
            Try (real hard) to find a type for the given type name
            </summary>
        </member>
        <member name="M:SysWeaver.TypeFinder.Get(System.String)">
            <summary>
            Get the type for a given type name or null if it can't be found
            </summary>
            <param name="typeName">The name of the type to find</param>
            <returns>The type or null if it can't be found</returns>
        </member>
        <member name="F:SysWeaver.WebTools.UserAgent">
            <summary>
            User agent to use for HttpClient's
            </summary>
        </member>
        <member name="M:SysWeaver.WebTools.CreateHttpClient(System.Boolean)">
            <summary>
            Create a http client with a user agent and automatic decompression
            </summary>
            <param name="useTor">If true, the client will proxy through the tor network (must be available)</param>
            <returns></returns>
        </member>
        <member name="M:SysWeaver.WebTools.GetHttpClient(System.Int32,System.Boolean)">
            <summary>
            Get a shared http client with a specific timeout.
            Do NOT dispose!
            Do NOT modify  the state of the client!
            </summary>
            <param name="timeOutInSeconds">The request time out in seconds</param>
            <param name="useTor">If true, the client will proxy through the tor network (must be available)</param>
            <returns>A http client</returns>
        </member>
        <member name="P:SysWeaver.WebTools.HttpClient">
            <summary>
            A shared http client that you can use.
            Do NOT dispose!
            Do NOT modify  the state of the client!
            </summary>
        </member>
    </members>
</doc>
